=head1 NAME

MARC::Doc::Tutorial - A documention-only module for new users of MARC::Record

=head1 SYNOPSIS

=head1 INTRODUCTION

=head2 What is MARC?

=head2 What is this Tutorial?

=head2 History of MARC on CPAN

=head2 Overview of MARC classes

=head1 READING

=head2 Reading a record from a file

Let's say you have a USMARC record in a file called 'file.dat' and you would 
like to read in the record and print out it's title. 

   1   ## Example 1 
   2   
   3   ## create a MARC::FILE::USMARC object
   4   use MARC::File::USMARC;
   5   my $file = MARC::File::USMARC->in('file.dat');
   6   
   7   ## get a marc record from the MARC::File object
   8   ## $record will be a MARC::Record object
   9   my $record = $file->next();
  10   
  11   ## print the title contained in the record
  12   print $record->title(),"\n";
  13   
  14   ## we're done so close the file
  15   $file->close();


=head2 Checking for errors

It is a good idea to get in the habit of checking for errors. MARC::* has 
been designed to help you do this. Here is example B<1.1> rewritten to use 
the C<$MARC::File::ERROR> and C<$MARC::Record::ERROR> variables. To save space
many of the examples in the cookbook will not do this error checking.

   1   ## Example 2 
   2   
   3   ## create a MARC::FILE::USMARC object
   4   use MARC::File::USMARC;
   5   my $file = MARC::File::USMARC->in('file.dat');
   6   
   7   ## if $file isn't defined we had trouble with the file
   8   ## so exit
   9   if (not($file)) {
  10     print $MARC::File::ERROR,"\n";
  11     exit(0);
  12   }
  13   
  14   ## get a marc record from the MARC::File object
  15   ## $record will be a MARC::Record object
  16   my $record = $file->next();
  17   
  18   ## if $record is not defined then we had trouble reading a record
  19   if (not($record)) {
  20     print $MARC::Record::ERROR,"\n";
  21     exit(0);
  22   }
  23   
  24   ## print the title contained in the record
  25   print $record->title(),"\n";
  26   
  27   ## we're done so close the file
  28   $file->close();


Lines 7-12 check to make sure that C<$file> contains a valid MARC::File::USMARC
object.  If the call to C<MARC::File::USMARC-E<gt>in()> fails it will return C<undef>
and set the C<$MARC::File::ERROR> variable to something meaningful. The same
goes for lines 18-22 which check to see that valid record was obtained from
the file.

=head2 Iterating through a batch file

Now imagine that 'file.dat' actually contains multiple records and 
we want to print out the title for all of them. Our program doesn't have 
to change very much at all: we just need to add a loop around our call
to C<next()>.


   1   ## Example 3 
   2   
   3   ## create a MARC::File::USMARC object
   4   use MARC::File::USMARC;
   5   my $file = MARC::File::USMARC->in('file.dat');
   6   
   7   ## if $file isn't defined we had trouble with the file
   8   ## so exit
   9   if (not($file)) {
  10     print $MARC::File::ERROR,"\n";
  11     exit(0);
  12   }
  13   
  14   while (my $record = $file->next()) {
  15   
  16     ## print the title contained in the record
  17     print $record->title(),"\n";
  18   
  19   }
  20   
  21   ## we're done so close the file
  22   $file->close();


The call to the next() method at line 14 returns the next record from the 
file. next() returns C<undef> when there are no more records left in the file,
which causes the while loop to end. This is a useful idiom for reading in 
all the records in a file.


=head2 Looking at a field 

Examples 1.1 - 1.3 use MARC::Record's title() method to easily access the
245 field...but you probably will want to write programs that access lots
of other MARC fields.

MARC::Record's field() method gives you complete access the data 
found in any MARC field. The field() method returns a MARC::Field object
which can be used to access the data, indicators, and even the individual 
subfields. Example 1.4 shows you how this is done. 


   1   ## Example 4
   2   
   3   ## open a file
   4   use MARC::File::USMARC;
   5   my $file = MARC::File::USMARC->in('file.dat');
   6   
   7   ## read a record
   8   my $record = $file->next();
   9   
  10   ## get the record's 100 field as a MARC::Field object
  11   my $field = $record->field('100'); 
  12   print "The 100 field contains: ",$field->as_string(),"\n"; 
  13   print "The 1st indicator is ",$field->indicator(1),"\n";
  14   print "The 2nd indicator is ",$field->indicator(2),"\n";
  15   print "Subfield d contains: ",$field->subfield('d'),"\n";


=head2 Looking at repeatable fields

So how do you retrieve data from repeatable fields? The field() method
can help you with this as well.  Above in example 1.4 on line 11 the 
field() method was used in a I<scalar> context, since the result was being 
assigned to the variable $field. 

However in a I<list> context field() will return all the fields in the 
record of that particular type. For example:


   1   ## Example 5 
   2   
   3   use MARC::File::USMARC;
   4   my $file = MARC::File::USMARC->in('file.dat');
   5   my $record = $file->next();
   6   
   7   ## get all the 650 fields (list context)
   8   my @fields = $record->field('650');
   9   
  10   ## examine each 650 field and print it out
  11   foreach my $field (@fields) {
  12     print $field->as_string(),"\n";
  13   }


=head2 Looking at a set of related fields

field() also allows you to retrieve similar fields using 'X' as a wildcard. 
For example, this functionality allows you to retrieve all the note fields
in one shot.


   1   ## Example 6
   2   
   3   use MARC::File::USMARC;
   4   my $file = MARC::File::USMARC->in('file.dat');
   5   my $record = $file->next();
   6   
   7   foreach my $field ($record->field('5XX')) {
   8     print $field->tag(),' contains ',$field->as_string(),"\n";
   9   }


Notice the shorthand in line 7 which compacts lines 7-13 of Example 1.5. 
Instead of storing the fields in an array, the field() still returns a list
in the for loop. Line 8 uses the tag() method which returns the tag number
for a particular MARC field--which is useful when you aren't certain what
tag you are dealing with.


=head2 Looking at all the fields in a record

The last example in this section illustrates how to retrieve I<all> the fields
in a record using the fields() method. 


   1   ## Example 7
   2   
   3   use MARC::File::USMARC;
   4   my $file = MARC::File::USMARC->in('file.dat');
   5   my $record = $file->next();
   6   
   7   ## get all of the fields useing the fields() method
   8   my @fields = $record->fields();
   9   
  10   ## print out the tag, the indicators and the field contents
  11   foreach my $field (@fields) {
  12     print 
  13       $field->tag(), " ", 
  14       $field->indicator(1),
  15       $field->indicator(2), " ",
  16       $field->as_string, " ",
  17       "\n";
  18   }


=head1 CREATING

The examples in the section 1 covered how to read in existing USMARC data
in a file. Section 2 will show you how to create a MARC record from scratch.
The techniques in this section would allow you to write programs that 
create MARC records that could then be loaded into an online catalog, or
sent to a third party.

=head2 Creating a record (pt. 1)

To create a record you need to:

=over 4

=item 1 

Create a MARC::Record object. 

=item 2

Add a leader to the record.

=item 3

Create MARC::Field objects for each field you want to have in the record.

=item 4

Add each of the MARC::Field objects to the MARC::Record object.

=back

For example:


   1   ## Example 8 
   2   
   3   ## create a MARC::Record object
   4   use MARC::Record;
   5   my $record = MARC::Record->new();
   6   
   7   ## add the leader to the record 
   8   $record->leader('00903pam   2200265 a 4500');
   9   
  10   ## create an author field 
  11   my $author = MARC::Field->new(
  12     '100',1,'',
  13       a => 'Logan, Robert K.',
  14       d => '1939-'
  15     );
  16   
  17   ## create a title field
  18   my $title = MARC::Field->new(
  19     '245','1','4',
  20       a => 'The alphabet effect /',
  21       c => 'Robert K. Logan.'
  22     );
  23   
  24   ## now add the fields to the record
  25   $record->add_fields($author,$title);


=head2 Creating a record (pt. 2)

MARC::Record has some shortcuts to make it possible to add fields
without having to create separate MARC::Field objects for each field.


   1   ## Example 9 
   2   
   3   ## create MARC::Record object
   4   use MARC::Record;
   5   my $record = MARC::Record->new();
   6   
   7   ## add the leader to the record
   8   $record->leader('00903pam  2200265 a 4500');
   9   
  10   ## add the author
  11   $record->add_fields(
  12     '100',1,'',
  13       a => 'Logan, Robert K.',
  14       d => '1939-'
  15     );
  16   
  17   ## add the title
  18   $record->add_fields(
  19     '245','1','4',
  20       a => 'The alphabet effect /',
  21       c => 'Robert K. Logan.'
  22     );


Notice how MARC::Field objects ($author and $title in Example 2.1) are 
not created?


=head2 Creating a record (pt. 3)

add_fields() supports another short cut which allows you to add all the fields 
in one fell swoop.

   1   ## Example 10 
   2   
   3   ## create MARC object
   4   use MARC::Record;
   5   my $record = MARC::Record->new();
   6   
   7   ## add the leader to the record
   8   $record->leader('00903pam  2200265 a 4500');
   9   
  10   ## now add all the fields
  11   $record->add_fields(
  12     [ '100','1','', a =>'Logan, Robert K.', d=>'1939-' ],
  13     [ '245','1','4', a=>'The alphabet effect /', c=>'Robert K. Logan.' ]
  14     );


The three idioms for adding fields to a record all have the exact same 
effect. If you find one more readable or understandable than the other 
then use it with abandon!


=head2 Creating a record from raw MARC data in a variable

The above examples illustrated how to create a record from MARC data stored
on disk. However you may have the raw USMARC data stored in a variable and 
want to create a MARC::Record from it. This situation can arise when you
are able to pull the MARC data out of a database, or using some input method
other that the filesystem. If you ever find yourself in this position take
a look at MARC::Record's new_from_usmarc() method which allows you to create
a MARC::Record object from the USMARC data stored in a variable.


=head1 WRITING

Sections 1 and 2 showed how to read and create USMARC data. Once you know how 
to read and create it becomes important to know how to write the USMARC data 
to disk in order to save your work. In this example we will create 
a new record and save it to a file called 'record.dat'. 

=head2 

=head2 Writing records to a file


   1   ## Example 11 
   2   
   3   ## create MARC object
   4   use MARC::Record;
   5   my $record = MARC::Record->new();
   6   $record->leader('00903pam  2200265 a 4500');
   7   $record->add_fields(
   8     [ '100','1','', a=>'Logan, Robert K.', d=>'1939-' ],
   9     [ '245','1','4', a=>'The alphabet effect /', c=>'Robert K. Logan.' ]
  10     );
  11   
  12   ## open a filehandle to write to 'file.dat'
  13   open(OUTPUT, '> record.dat');
  14   print OUTPUT $record->as_usmarc();
  15   close(OUTPUT);


The as_usmarc() method call at line 14 returns a scalar value which is the
raw USMARC data for $record. The raw data is then promptly printed to the 
OUTPUT file handle. If you want to output multiple records to a file you could 
simply repeat the process at line 14 for the additional records.

Note to the curious: the as_usmarc() method is actually an alias to the
MARC::File::USMARC::encode() method. Having separate encode() methods is
a design feature of the MARC class hierarchy since it allows extensions to
be built that translate MARC::Record objects into different data formats.
More about this later in HACKING & EXTENDING. 



=head2 Debugging with as_formatted()

Since raw USMARC data isn't very easy for humans to read, it is often useful 
to be able to see the contents of your MARC::Record object represented in a 
'pretty' way for debugging purposes. If you have MARC::Record object you'd
like to pretty-print use the as_formatted() method.


   1   ## Example 12
   2   
   3   ## create MARC object
   4   use MARC::Record;
   5   my $record = MARC::Record->new();
   6   $record->leader('00903pam  2200265 a 4500');
   7   $record->add_fields(
   8     [ '100','1','', a=>'Logan, Robert K.', d=>'1939-' ],
   9     [ '245','1','4', a=>'The alphabet effect /', c=>'Robert K. Logan.' ]
  10     );
  11   
  12   ## pretty print the record
  13   print $record->as_formatted();


Unlike in Example 3.1 this code will pretty print the contents of the 
newly created record to the screen.


=head2 Debugging with marcdump()

If you have written USMARC data to a file as in example 3.1 and you would
like to verify that the data is stored correctly you can use the marcdump
command line utility that was installed when you installed the MARC::Record
package.

 % marcdump record.dat
 record.dat
 LDR 00122pam  2200049 a 4500
 100 1  _aLogan, Robert K.
	_d1939-
 245 14 _aThe alphabet effect /
        _cRobert K. Logan.

  Recs  Errs Filename
 ----- ----- --------
     1     0 record.dat

As you can see this command results in the record being pretty printed to 
your screen (STDOUT). It is useful for verifying your USMARC data after
it has been stored on disk. More details about debugging are found later
in VALIDATING.


=head1 UPDATING

Now that you know how to read, write and create MARC data you have the
tools you need to update or edit exiting MARC data. Updating MARC 
data is a common task for library catalogers. Sometimes there are huge
amounts of records that need to be touched up...and while the touch ups are
very detail oriented they are also highly repetitive. Luckily computers
are tireless, and not very prone to error (assuming the programmer isn't).
5B

When libraries receive large batches of MARC records for electronic text 
collections such as NetLibrary, Making of America, or microfiche sets such as 
Early American Imprints the records are often loaded into an online system,
and then the system is used to update the records. Unfortunately not all 
these systems are created equal, and catalogers have to spend a great deal
of time touching up each individual record. An alternative would be to 
process the records prior to import, and then once in the system the records 
would not need touching up. This scenario would save a great deal of time for 
the cataloger who would be liberated to spend their time doing original 
cataloging...which computers are notably bad at! 

=head2 Adding a field

Imagine that you have a batch of records in a file called 'file_1.dat'
and that you would like to add a local note to (590) to each record and save
it as 'file_2.dat'. 


   1   ## Example 13 
   2   
   3   ## create our MARC::Batch object
   4   use MARC::Batch;
   5   my $batch = MARC::Batch->new('USMARC','file_1.dat');
   6   
   7   ## open a file handle to write to
   8   open(OUT,'>file_2.dat');
   9   
  10   ## read in each record 
  11   while ( my $record = $batch->next() ) {
  12   
  13     ## add the note
  14     $record->add_fields(
  15       '590','','',
  16         a => 'Access provided by Enron.'
  17       );
  18     
  19     print OUT $record->as_usmarc();
  20   
  21   }
  22   
  23   close(OUT);

Notice on lines 2-3 how MARC::Batch is used instead of MARC::File::USMARC. 
MARC::Batch provides an alternate way of reading records from files, and
provides a uniform interface to the different MARC::File modules.

=head2 Deleting a field

You can also delete fields that you don't want. But you will want to check 
that the field contains what you expect before deleting it. Let's say Enron 
has gone out of busines and the 590 field needs to be deleted. 


   1   ## Example 14 
   2   
   3   use MARC::Batch;
   4   my $batch = MARC::Batch->new('USMARC','file_2.dat');
   5   open(OUT,'>file_3.dat');
   6   
   7   while ( my $record = $batch->next() ) {
   8   
   9     ## get the 590 record
  10     my $field = $record->field('590');
  11   
  12     ## if there is a 590 field AND it has the word Enron in it
  13     if ($field and $field->as_string() =~ /Enron/i) {
  14   
  15       ## delete it!
  16       $record->delete_field($field);
  17   
  18     }
  19   
  20     ## output possibly modified record to our new file
  21     print OUT $record->as_usmarc(); 
  22   
  23   }


The 590 field is retrieved on line 8; but notice how we check that we 
actually got a 590 field in $field, and that it contains the word 'Enron'
before we delete it. You need to pass delete_field() a MARC::Field
object that can be retrieved with the field() method.

=head2 Changing existing fields

Perhaps rather than adding or deleting a field you need to modify an 
existing field. This is achieved in several steps:

=over 4

=item 1

Read in the MARC record that you want to update.

=item 2

Retrieve the field you want to update.

=item 3

Extract any information from the field that you want to keep (if any).

=item 4 

Delete the field. 

=item 5 

Add the new modified field.

=item 6 

Save the modified record.

=back


   1   ## Example 15
   2   
   3   use MARC::Batch;
   4   my $batch = MARC::Batch->new('USMARC','file_2.dat');
   5   open(OUT,'>file_4.dat');
   6   
   7   while ( my $record = $batch->next() ) {
   8   
   9     ## look for and delete the 590 field containing 'enron'
  10     my $field = $record->field('590');
  11     if ( $field and $field->as_string =~ /enron/i ) {
  12       $record->delete_field($field);
  13     }
  14   
  15     ## create a new 590 field for Arthur Andersen. 
  16     $record->add_fields( 
  17       '590', '', '', 
  18         'a' => 'Access provided by Arthur Andersen.'
  19       );
  20   
  21     ## print out our modified record
  22     print OUT $record->as_usmarc();
  23   
  24   }


=head2 Changing a record's leader

This procedure works for fields, but editing the leader requires that you 
use the leader() method. When called with no arguments leader() will return
the current leader, and when you pass a scalar value as an argument the
leader will be set to this value. This example shows how you might want
to update position 6 of a records leader to reflect that the record is for
a computer file.


   1   ## Example 16
   2   
   3   use MARC::Batch;
   4   my $batch = MARC::Batch->new('USMARC','file_4.dat');
   5   open(OUT,'>file_5.dat');
   6   my $record = $batch->next();
   7   
   8   ## get the current leader
   9   my $leader = $record->leader();
  10   
  11   ## replace what is in position 6 with 'm'
  12   substr($leader,6,1) = 'm'; 
  13   
  14   ## update the leader
  15   $record->leader($leader);
  16   
  17   ## save the record to a file
  18   print OUT $record->as_usmarc();


=head2 Cloning a record

=head2 Cloning a field

=head2 Cloning a subfield


=head1 SEARCHING & FILTERING

=head2 Finding particular records

=head2 Removing particular records from a batch

=head2 Outputting specific information from a batch 

=head2 Comparing collections of records


=head1 VALIDATING

=head2 using MARC::Record::ERROR

=head2 using MARC::Lint

=head2 extending MARC::Lint


=head1 AUTHORITY RECORDS


=head1 SPECIAL TOPICS

=head2 URLs

=head2 ISBN/ISSNs

=head2 Call numbers

=head2 Subject headings

=head2 HTML

=head2 XML

=head2 Excel

=head2 Databases

=head2 Z39.50

=head2 Procite/Endnote

=head2 MicroLif

