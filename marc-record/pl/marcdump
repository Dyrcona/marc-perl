#!/usr/bin/perl -w


=head1 NAME

marcdump - MARC record dump utility

=head1 SYNOPSIS

B<marcdump> [options] file(s)

=over 4

=item options

=over 4

=item --help

Print a summary of commands

=item --[no]print

Print a MicroLIF-style dump of each record.  (Default: on)

=item --[no]quiet

Don't print status messages (Default: off)

=item --[no]stats

Print a statistical summary by file at the end.  (Default: on)

=back

=back

=cut

use warnings;
use strict;
use integer;

use lib qw( /home/alester/marc/lib );
use MARC::Record;
use Getopt::Long;

use constant USAGE => <<"END";
Usage: marcdump [options] file(s)
    options
        --help
	    Print a summary of commands
        --[no]print
            Print a MicroLIF-style dump of each record
	--[no]quiet
	    Don't print status messages
        --[no]stats
            Print a statistical summary by file at the end
END

my $opt_print = 1;
my $opt_quiet = 0;
my $opt_stats = 1;
my $opt_help = 0;

my $rc =
    GetOptions(
	"print!" => \$opt_print,
	"quiet"  => \$opt_quiet,
	"stats!" => \$opt_stats,
	"help"   => \$opt_help,
	);

die USAGE if $opt_help;
	
if ( not $rc ) {
	warn "Illegal command-line option (use --help for usage)\n";
	die USAGE;
}

my @files = @ARGV;
if ( @files == 0 ) {
	warn "No filenames specified  (use --help for usage)\n";
	die USAGE;
}

my %counts;
my %errors;
for my $filename ( @files ) {
	$counts{$filename} = 0;
	$errors{$filename} = 0;

	warn "$filename\n" unless $opt_quiet;
	open( $fh, "<", $filename ) or die "Couldn't open $filename: $!\n";

	while ( !eof($fh) ) {
		++$counts{$filename};
		warn "$counts{$filename} records\n" if ( !$opt_quiet && ($counts{$filename} % 1000 == 0) );
		my $marc = MARC::Record::next_from_file( *$fh ) or die $MARC::Record::ERROR;

		print $marc->as_formatted, "\n\n" if $opt_print;
		if ( $marc->warnings() ) {
			++$errors{$filename};
			print join( "\n", $marc->warnings(), "" );
		}
	} # while
	close $fh;
} # for 

if ( $opt_stats ) {
	print " Recs  Errs Filename\n";
	print "----- ----- --------\n";
	for my $key ( sort keys %counts ) {
		printf( "%5d %5d %s\n", $counts{$key}, $errors{$key}, $key );
	} # for
} # if stats
