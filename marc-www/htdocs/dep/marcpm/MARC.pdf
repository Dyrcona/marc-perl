%PDF-1.2
%‚„œ”
1 0 obj
[/CalRGB
<<
/WhitePoint [0.9505 1 1.089]
/Gamma [1.8 1.8 1.8]
/Matrix [0.4497 0.2446 0.02518 0.3613 0.672 0.1412 0.1845 0.08334 0.9227]
>>
]
endobj
2 0 obj
<<
/CreationDate (D:20000828064224-0700)
/Producer (pod2pdf)
/Title (MARC.pm)
>>
endobj
5 0 obj
<<
/Type /Encoding
/Differences [ 0 /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam
/quotedbl /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one /two /three /four /five
/six /seven /eight /nine /colon /semicolon /less /equal
/greater /question /at /A /B /C /D /E /F /G /H /I /J /K /L
/M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft
/backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
/asciitilde /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /emdash
/dotlessi /grave /acute /circumflex /tilde /macron /breve
/dotaccent /dieresis /.notdef /ring /cedilla /.notdef
/hungarumlaut /ogonek /caron /space /exclamdown /cent
/sterling /currency /yen /brokenbar /section /dieresis
/copyright /ordfeminine /guillemotleft /logicalnot /hyphen
/registered /macron /degree /plusminus /twosuperior
/threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown /Agrave
/Aacute /Acircumflex /Atilde /Adieresis /Aring /AE
/Ccedilla /Egrave /Eacute /Ecircumflex /Edieresis /Igrave
/Iacute /Icircumflex /Idieresis /Eth /Ntilde /Ograve
/Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash
/Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
/germandbls /agrave /aacute /acircumflex /atilde /adieresis
/aring /ae /ccedilla /egrave /eacute /ecircumflex
/edieresis /igrave /iacute /icircumflex /idieresis /eth
/ntilde /ograve /oacute /ocircumflex /otilde /odieresis
/divide /oslash /ugrave /uacute /ucircumflex /udieresis
/yacute /thorn /ydieresis ]
>>
endobj
6 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F00
/Encoding 5 0 R
/BaseFont /Times-Roman
>>
endobj
7 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F01
/Encoding 5 0 R
/BaseFont /Times-Bold
>>
endobj
8 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F02
/Encoding 5 0 R
/BaseFont /Times-Italic
>>
endobj
9 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F03
/Encoding 5 0 R
/BaseFont /Times-BoldItalic
>>
endobj
10 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F10
/Encoding 5 0 R
/BaseFont /Courier
>>
endobj
11 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F11
/Encoding 5 0 R
/BaseFont /Courier-Bold
>>
endobj
12 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F12
/Encoding 5 0 R
/BaseFont /Courier-Oblique
>>
endobj
13 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F13
/Encoding 5 0 R
/BaseFont /Courier-BoldOblique
>>
endobj
14 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F20
/Encoding 5 0 R
/BaseFont /Helvetica
>>
endobj
15 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F21
/Encoding 5 0 R
/BaseFont /Helvetica-Bold
>>
endobj
16 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F22
/Encoding 5 0 R
/BaseFont /Helvetica-Oblique
>>
endobj
17 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F23
/Encoding 5 0 R
/BaseFont /Helvetica-BoldOblique
>>
endobj
0 g
18 0 obj
<<
/Length 19 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F21 12 Tf
1 0 0 1 72.0 752.0 Tm
0.0000 Tw
(NAME ) Tj
/F00 10 Tf
1 0 0 1 102.0 737.6 Tm
0.0000 Tw
(MARC.pm - Perl extension to manipulate MAchine Readable Cataloging records. ) Tj
/F21 12 Tf
1 0 0 1 72.0 719.6 Tm
0.0000 Tw
(SYNOPSIS ) Tj
/F10 10 Tf
1 0 0 1 102.0 699.2 Tm
0.0000 Tw
(  use MARC; ) Tj
1 0 0 1 150.0 675.2 Tm
0.0000 Tw
(# constructors ) Tj
1 0 0 1 102.0 663.2 Tm
0.0000 Tw
(  $x=MARC->new\(\); ) Tj
1 0 0 1 102.0 651.2 Tm
0.0000 Tw
(  $x=MARC->new\("filename","fileformat"\); ) Tj
1 0 0 1 102.0 639.2 Tm
0.0000 Tw
(  $x->openmarc\(\{file=>"makrbrkr.mrc",'format'=>"marcmaker", ) Tj
1 0 0 1 198.0 627.2 Tm
0.0000 Tw
(increment=>"5", lineterm=>"\\n", ) Tj
1 0 0 1 198.0 615.2 Tm
0.0000 Tw
(charset=>\\%char_hash\}\); ) Tj
1 0 0 1 102.0 603.2 Tm
0.0000 Tw
(  $record_num=$x->createrecord\(\{leader=>"00000nmm  2200000 a 4500"\}\); ) Tj
1 0 0 1 150.0 579.2 Tm
0.0000 Tw
(# input/output operations ) Tj
1 0 0 1 102.0 567.2 Tm
0.0000 Tw
(  $y=$x->nextmarc\(10\);) Tj
1 0 0 1 342.0 567.2 Tm
0.0000 Tw
(# increment ) Tj
1 0 0 1 102.0 555.2 Tm
0.0000 Tw
(  $x->closemarc\(\); ) Tj
1 0 0 1 102.0 543.2 Tm
0.0000 Tw
(  print $x->marc_count\(\); ) Tj
1 0 0 1 102.0 531.2 Tm
0.0000 Tw
(  $x->deletemarc\(\{record=>'2',field=>'110'\}\); ) Tj
1 0 0 1 102.0 519.2 Tm
0.0000 Tw
(  $y=$x->selectmarc\(['4','21-50','60']\); ) Tj
1 0 0 1 150.0 495.2 Tm
0.0000 Tw
(# character translation ) Tj
1 0 0 1 102.0 483.2 Tm
0.0000 Tw
(  my %inc = %\{$x->usmarc_default\(\)\};) Tj
1 0 0 1 342.0 483.2 Tm
0.0000 Tw
(# MARCMaker input charset ) Tj
1 0 0 1 102.0 471.2 Tm
0.0000 Tw
(  my %outc = %\{$x->ustext_default\(\)\};) Tj
1 0 0 1 342.0 471.2 Tm
0.0000 Tw
(# MARCBreaker output charset ) Tj
1 0 0 1 150.0 447.2 Tm
0.0000 Tw
(# data queries ) Tj
1 0 0 1 102.0 435.2 Tm
0.0000 Tw
(  @records = $x->searchmarc\(\{field=>"245"\}\); ) Tj
1 0 0 1 102.0 423.2 Tm
0.0000 Tw
(  @records = $x->searchmarc\(\{field=>"260",subfield=>"c", ) Tj
1 0 0 1 246.0 411.2 Tm
0.0000 Tw
(     regex=>"/19../"\}\); ) Tj
1 0 0 1 102.0 399.2 Tm
0.0000 Tw
(  @records = $x->searchmarc\(\{field=>"245",notregex=>"/huckleberry/i"\}\); ) Tj
1 0 0 1 102.0 387.2 Tm
0.0000 Tw
(  @results = $x->getvalue\(\{record=>'12',field=>'856',subfield=>'u'\}\); ) Tj
1 0 0 1 150.0 363.2 Tm
0.0000 Tw
(# header and control field operations ) Tj
1 0 0 1 102.0 351.2 Tm
0.0000 Tw
(  $rldr = $x->unpack_ldr\($record\); ) Tj
1 0 0 1 102.0 339.2 Tm
0.0000 Tw
(  print "Desc is $rldr->\{Desc\}"; ) Tj
1 0 0 1 102.0 327.2 Tm
0.0000 Tw
(  next if \($x->bib_format\($record\) eq 'SERIALS'\); ) Tj
1 0 0 1 102.0 315.2 Tm
0.0000 Tw
(  $rff = $x->unpack_008\($record\); ) Tj
1 0 0 1 102.0 303.2 Tm
0.0000 Tw
(  last if \($rff->\{'Date1'\}=~/00/ or $rff->\{'Date2'\}=~/00/\); ) Tj
1 0 0 1 150.0 279.2 Tm
0.0000 Tw
(# data modifications ) Tj
1 0 0 1 102.0 267.2 Tm
0.0000 Tw
(  $x->addfield\(\{record=>"2", field=>"245", ) Tj
1 0 0 1 198.0 255.2 Tm
0.0000 Tw
(i1=>"1", i2=>"4", ordered=>'y', value=> ) Tj
1 0 0 1 198.0 243.2 Tm
0.0000 Tw
([a=>"The adventures of Huckleberry Finn /", ) Tj
1 0 0 1 102.0 231.2 Tm
0.0000 Tw
(                 c=>"Mark Twain ; illustrated by E.W. Kemble."]\}\); ) Tj
1 0 0 1 102.0 207.2 Tm
0.0000 Tw
(  my $update245 = \{field=>'245',record=>2,ordered=>'y'\}; ) Tj
1 0 0 1 102.0 195.2 Tm
0.0000 Tw
(  my @u245 = $x->getupdate\($update245\); ) Tj
1 0 0 1 102.0 183.2 Tm
0.0000 Tw
(  $x->deletemarc\($update245\); ) Tj
1 0 0 1 102.0 171.2 Tm
0.0000 Tw
(  $x->addfield\($update245, @u245_modified\); ) Tj
1 0 0 1 150.0 147.2 Tm
0.0000 Tw
(# outputs ) Tj
1 0 0 1 102.0 135.2 Tm
0.0000 Tw
(  $y = $x->output\(\{'format'=>"marcmaker", charset=>\\%outc\}\); ) Tj
1 0 0 1 102.0 123.2 Tm
0.0000 Tw
(  $x->output\(\{file=>">>my_text.txt",'format'=>"ascii",record=>2\}\); ) Tj
1 0 0 1 102.0 111.2 Tm
0.0000 Tw
(  $x->output\(\{file=>">my_marcmaker.mkr",'format'=>"marcmaker", ) Tj
1 0 0 1 150.0 99.2 Tm
0.0000 Tw
(      nolinebreak=>'y',lineterm=>'\\n'\}\); ) Tj
1 0 0 1 102.0 87.2 Tm
0.0000 Tw
(  $x->output\(\{file=>">titles.html",'format'=>"html", 245=>"Title: "\}\);     ) Tj
1 0 0 1 102.0 63.2 Tm
0.0000 Tw
(        # manipulation of individual marc records. ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 517.44 37 Tm
(1) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
19 0 obj
4349
endobj
20 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
21 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 20 0 R
/Contents 18 0 R
>>
endobj
22 0 obj
<<
/Length 23 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(  @recs = $x[1..$#$x]; ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(  grep \{$_->unpack_ldr\(\) && 0\} @recs; ) Tj
1 0 0 1 102.0 734.0 Tm
0.0000 Tw
(  @LCs = grep \{$_->unp_ldr\{Desc\} eq 'a' && ) Tj
1 0 0 1 150.0 722.0 Tm
0.0000 Tw
(       $_->getvalue\(\{field=>'040'\}\) =~/DLC\\c_.DLC/\} @recs; ) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
(  foreach my $rec \(@LCs\) \{ ) Tj
1 0 0 1 150.0 698.0 Tm
0.0000 Tw
(  print $rec->output\(\{format=>'usmarc'\}\); ) Tj
1 0 0 1 102.0 686.0 Tm
0.0000 Tw
(  \} ) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(        # manipulation as strings. ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(  foreach my $rec \(@LCs\) \{ ) Tj
1 0 0 1 150.0 638.0 Tm
0.0000 Tw
(  my $stringvar = $rec->as_string\(\); ) Tj
1 0 0 1 150.0 626.0 Tm
0.0000 Tw
(  $stringvar=~s[^\( ) Tj
1 0 0 1 246.0 614.0 Tm
0.0000 Tw
(  100\\s # main entries of this stripe.. ) Tj
1 0 0 1 246.0 602.0 Tm
0.0000 Tw
(  ..\\s # \(don't care about indicators\) ) Tj
1 0 0 1 246.0 590.0 Tm
0.0000 Tw
(  \\c_.\\s* ) Tj
1 0 0 1 246.0 578.0 Tm
0.0000 Tw
(  \)\(\\S\) # take the first letter.. ) Tj
1 0 0 1 246.0 566.0 Tm
0.0000 Tw
(] [ ) Tj
1 0 0 1 246.0 554.0 Tm
0.0000 Tw
($\{1\}uc\($2\) # and upcase it. All authors have  ) Tj
1 0 0 1 294.0 542.0 Tm
0.0000 Tw
(   # upcase first letters in my library. ) Tj
1 0 0 1 246.0 530.0 Tm
0.0000 Tw
(]xm; # x means 'ignore whitespace and allow ) Tj
1 0 0 1 246.0 518.0 Tm
0.0000 Tw
(     # embedded comments'.  ) Tj
1 0 0 1 150.0 506.0 Tm
0.0000 Tw
( $rec->from_string\($stringvar\); ) Tj
1 0 0 1 150.0 494.0 Tm
0.0000 Tw
( my \($i2,$article\) = $stringvar =~/245 .\(.\) \\c_.\(.\{0,9\}\)/;) Tj
1 0 0 1 534.0 494.0 Tm
0.0000 Tw
( ) Tj
1 0 0 1 150.0 482.0 Tm
0.0000 Tw
( $article = substr\($article,0,$i2\) if $i2=~/\\d/; ) Tj
1 0 0 1 150.0 470.0 Tm
0.0000 Tw
( print "article $article is not common" unless $COMMON_ARTS\{$article\}; ) Tj
1 0 0 1 102.0 458.0 Tm
0.0000 Tw
(  \} ) Tj
/F21 12 Tf
1 0 0 1 72.0 440.0 Tm
0.0000 Tw
(DESCRIPTION ) Tj
/F00 10 Tf
1 0 0 1 102.0 425.6 Tm
0.7347 Tw
(MARC.pm is a Perl 5 module for reading in, manipulating, and outputting bibliographic records in the) Tj
1 0 0 1 102.0 413.6 Tm
0.4706 Tw
() Tj
/F02 10 Tf
0.4706 Tw
(USMARC) Tj
/F00 10 Tf
0.4706 Tw
( format. You will need to have Perl 5.004 or greater for MARC.pm to work properly. Since it) Tj
1 0 0 1 102.0 401.6 Tm
0.1279 Tw
(is a Perl module you use MARC.pm from one of your own Perl scripts. To see what sorts of conversions) Tj
1 0 0 1 102.0 389.6 Tm
0.5978 Tw
(are possible you can try out a web interface to MARC.pm which will allow you to upload MARC files) Tj
1 0 0 1 102.0 377.6 Tm
0.0000 Tw
(and retrieve the results \(for details see the section below entitled "Web Interface"\).  ) Tj
/F00 10 Tf
1 0 0 1 102.0 365.6 Tm
0.2235 Tw
(However, to get the full functionality you will probably want to install MARC.pm on your server or PC.) Tj
1 0 0 1 102.0 353.6 Tm
0.1200 Tw
(MARC.pm can handle both single and batches of MARC  records. The limit on the number of records in) Tj
1 0 0 1 102.0 341.6 Tm
0.2032 Tw
(a batch is determined by the memory capacity of the machine you are running. If memory is an issue for) Tj
1 0 0 1 102.0 329.6 Tm
1.3669 Tw
(you MARC.pm will allow you to read in records from a batch gradually. MARC.pm also includes a) Tj
1 0 0 1 102.0 317.6 Tm
0.0000 Tw
(variety of tools for searching, removing, and even creating records from scratch. ) Tj
/F21 10 Tf
1 0 0 1 72.0 299.6 Tm
0.0000 Tw
(Types of Conversions: ) Tj
/F20 10 Tf
1 0 0 1 102.0 285.2 Tm
0.0000 Tw
() Tj
ET
q
102 286.2 4 4 re
f
Q
BT
1 0 0 1 110 285.2 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 285.2 Tm
0.0000 Tw
(MARC -) Tj
/F00 10 Tf
0.0000 Tw
( ASCII : separates the MARC fields out into separate lines ) Tj
/F20 10 Tf
1 0 0 1 102.0 270.8 Tm
0.0000 Tw
() Tj
ET
q
102 271.8 4 4 re
f
Q
BT
1 0 0 1 110 270.8 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 270.8 Tm
2.1579 Tw
(MARC <-> MARCMaker : The MARCMaker format is a format that was developed by the) Tj
1 0 0 1 126.0 258.8 Tm
0.5408 Tw
() Tj
/F02 10 Tf
0.5408 Tw
(Library of Congress) Tj
/F00 10 Tf
0.5408 Tw
( for use with their DOS based ) Tj
/F02 10 Tf
0.5408 Tw
(MARCMaker) Tj
/F00 10 Tf
0.5408 Tw
( and ) Tj
/F02 10 Tf
0.5408 Tw
(MARCBreaker) Tj
/F00 10 Tf
0.5408 Tw
( utilities. This) Tj
1 0 0 1 126.0 246.8 Tm
0.0787 Tw
(format is particularly useful for making  global changes \(ie. with a text editor`s search and replace\)) Tj
1 0 0 1 126.0 234.8 Tm
2.7109 Tw
(and then converting back to MARC \(MARC.pm will read properly formatted MARCMaker) Tj
1 0 0 1 126.0 222.8 Tm
0 Tw
(records\). For more information about the MARCMaker format see) Tj
1 0 0 1 126.0 210.8 Tm
0.0000 Tw
(http://lcweb.loc.gov/marc/marcsoft.html ) Tj
/F20 10 Tf
1 0 0 1 102.0 196.4 Tm
0.0000 Tw
() Tj
ET
q
102 197.4 4 4 re
f
Q
BT
1 0 0 1 110 196.4 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 196.4 Tm
0.0065 Tw
(MARC -) Tj
/F00 10 Tf
0.0065 Tw
( HTML : The MARC to HTML conversion creates an HTML file from the fields and field) Tj
1 0 0 1 126.0 184.4 Tm
0.1794 Tw
(labels that you supply. You could possibly use this to create HTML bibliographies from a batch of) Tj
1 0 0 1 126.0 172.4 Tm
0.0000 Tw
(MARC records.  ) Tj
/F20 10 Tf
1 0 0 1 102.0 158.0 Tm
0.0000 Tw
() Tj
ET
q
102 159 4 4 re
f
Q
BT
1 0 0 1 110 158 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 158.0 Tm
0.7147 Tw
(MARC <-> XML : XML support is handled by MARC::XML which is a subclass of MARC.pm) Tj
1 0 0 1 126.0 146.0 Tm
0.0000 Tw
(and is  also available for download from the CPAN. ) Tj
/F20 10 Tf
1 0 0 1 102.0 131.6 Tm
0.0000 Tw
() Tj
ET
q
102 132.6 4 4 re
f
Q
BT
1 0 0 1 110 131.6 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 131.6 Tm
0.8044 Tw
(MARC -) Tj
/F00 10 Tf
0.8044 Tw
( URLS : This conversion will extract URLs from a batch of MARC records. The URLs) Tj
1 0 0 1 126.0 119.6 Tm
1.1644 Tw
(are found in the 856 field, subfield u. The HTML page that is generated can then be used with) Tj
1 0 0 1 126.0 107.6 Tm
1.2608 Tw
(link-checking software to determine which URLs need to be repaired. Hopefully library system) Tj
1 0 0 1 126.0 95.6 Tm
0.0000 Tw
(vendors will soon support this activity soon and make this conversion unecessary! ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(2) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
23 0 obj
6487
endobj
24 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F02 8 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
25 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 24 0 R
/Contents 22 0 R
>>
endobj
26 0 obj
<<
/Length 27 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F21 10 Tf
1 0 0 1 72.0 770.0 Tm
0.0000 Tw
(Downloading and Installing ) Tj
/F20 10 Tf
1 0 0 1 102.0 755.6 Tm
0.0000 Tw
(Download ) Tj
/F00 10 Tf
1 0 0 1 126.0 743.6 Tm
1.8314 Tw
(The module is provided in standard CPAN distribution format. It will extract into a directory) Tj
1 0 0 1 126.0 731.6 Tm
4.0930 Tw
(MARC-version with any necessary subdirectories. Change into the MARC top directory.) Tj
1 0 0 1 126.0 719.6 Tm
0.0000 Tw
(Download the latest version from  http://www.cpan.org/modules/by-module/MARC/ ) Tj
/F20 10 Tf
1 0 0 1 102.0 705.2 Tm
0.0000 Tw
(Unix ) Tj
/F10 10 Tf
1 0 0 1 126.0 687.2 Tm
0.0000 Tw
(    perl Makefile.PL ) Tj
1 0 0 1 126.0 675.2 Tm
0.0000 Tw
(    make ) Tj
1 0 0 1 126.0 663.2 Tm
0.0000 Tw
(    make test ) Tj
1 0 0 1 126.0 651.2 Tm
0.0000 Tw
(    make install ) Tj
/F20 10 Tf
1 0 0 1 102.0 630.8 Tm
0.0000 Tw
(Win9x/WinNT/Win2000 ) Tj
/F10 10 Tf
1 0 0 1 126.0 612.8 Tm
0.0000 Tw
(    perl Makefile.PL ) Tj
1 0 0 1 126.0 600.8 Tm
0.0000 Tw
(    perl test.pl ) Tj
1 0 0 1 126.0 588.8 Tm
0.0000 Tw
(    perl install.pl ) Tj
/F20 10 Tf
1 0 0 1 102.0 568.4 Tm
0.0000 Tw
(Test ) Tj
/F00 10 Tf
1 0 0 1 126.0 556.4 Tm
1.1841 Tw
(Once you have installed, you can check if Perl can find it. Change to some other directory and) Tj
1 0 0 1 126.0 544.4 Tm
0.0000 Tw
(execute from the command line: ) Tj
/F10 10 Tf
1 0 0 1 126.0 532.4 Tm
0.0000 Tw
(    perl -e "use MARC" ) Tj
/F00 10 Tf
1 0 0 1 126.0 508.4 Tm
0.5621 Tw
(If you do not get any response that means everything is OK! If you get an error like ) Tj
/F02 10 Tf
0.5621 Tw
(Can`t locate) Tj
1 0 0 1 126.0 496.4 Tm
0.4833 Tw
(method "use" via package MARC) Tj
/F00 10 Tf
0.4833 Tw
(. then Perl is not able to find MARC.pm\217double check that the) Tj
1 0 0 1 126.0 484.4 Tm
0.0000 Tw
(file copied it into the right place during the install. ) Tj
/F21 10 Tf
1 0 0 1 72.0 454.4 Tm
0.0000 Tw
(Todo ) Tj
/F20 10 Tf
1 0 0 1 102.0 440.0 Tm
0.0000 Tw
() Tj
ET
q
102 441 4 4 re
f
Q
BT
1 0 0 1 110 440 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 440.0 Tm
0.0000 Tw
(Support for other MARC formats \(UKMARC, FINMARC, etc\). ) Tj
/F20 10 Tf
1 0 0 1 102.0 425.6 Tm
0.0000 Tw
() Tj
ET
q
102 426.6 4 4 re
f
Q
BT
1 0 0 1 110 425.6 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 425.6 Tm
0.0000 Tw
(Create a map and instructions for using and extending the MARC.pm data structure. ) Tj
/F20 10 Tf
1 0 0 1 102.0 411.2 Tm
0.0000 Tw
() Tj
ET
q
102 412.2 4 4 re
f
Q
BT
1 0 0 1 110 411.2 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 411.2 Tm
0.0000 Tw
(Develop better error catching mechanisms. ) Tj
/F20 10 Tf
1 0 0 1 102.0 396.8 Tm
0.0000 Tw
() Tj
ET
q
102 397.8 4 4 re
f
Q
BT
1 0 0 1 110 396.8 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 396.8 Tm
0.0000 Tw
(Support for MARC <-> Unicode character conversions. ) Tj
/F20 10 Tf
1 0 0 1 102.0 382.4 Tm
0.0000 Tw
() Tj
ET
q
102 383.4 4 4 re
f
Q
BT
1 0 0 1 110 382.4 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 382.4 Tm
0.0000 Tw
(MARC <-> EAD \(Encoded Archival Description\) conversion? ) Tj
/F20 10 Tf
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
() Tj
ET
q
102 369 4 4 re
f
Q
BT
1 0 0 1 110 368 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 368.0 Tm
0.0000 Tw
(MARC <-> DC/RDF \(Dublin Core Metadata encoded in the Resource Description Framework\)? ) Tj
/F21 10 Tf
1 0 0 1 72.0 338.0 Tm
0.0000 Tw
(Web Interface ) Tj
/F00 10 Tf
1 0 0 1 102.0 326.0 Tm
0.5833 Tw
(A web interface to MARC.pm is available at http://marcpm.sourceforge.net/cgi-bin/converter.cgi where) Tj
1 0 0 1 102.0 314.0 Tm
0.8735 Tw
(you can upload records and observe the results. If you`d like to check out the cgi script take a look at) Tj
1 0 0 1 102.0 302.0 Tm
0 Tw
(http://marcpm.sourceforge.net/documentation/marcpm/converter.txt However, to get the full) Tj
1 0 0 1 102.0 290.0 Tm
0.0000 Tw
(functionality you will want to install MARC.pm on your server or PC. ) Tj
/F21 10 Tf
1 0 0 1 72.0 272.0 Tm
0.0000 Tw
(Option Templates ) Tj
/F00 10 Tf
1 0 0 1 102.0 260.0 Tm
0.4450 Tw
(A MARC record is a complex structure. Hence, most of the methods have a number of options. Since a) Tj
1 0 0 1 102.0 248.0 Tm
1.3700 Tw
(series of operations frequently uses many the same options for each method, you can create a single) Tj
1 0 0 1 102.0 236.0 Tm
0.0947 Tw
(variable that forms a "template" for the desired options. The variable points to a hash - and the hash keys) Tj
1 0 0 1 102.0 224.0 Tm
0.0000 Tw
(have been selected so the same hash works for all of the related methods. ) Tj
/F10 10 Tf
1 0 0 1 102.0 212.0 Tm
0.0000 Tw
(    my $loc852 = \{record=>1, field=>'852', ordered=>'y'\}; ) Tj
1 0 0 1 102.0 200.0 Tm
0.0000 Tw
(    my \($found\) = $x->searchmarc\($loc852\); ) Tj
1 0 0 1 102.0 188.0 Tm
0.0000 Tw
(    if \(defined $found\) \{ ) Tj
1 0 0 1 102.0 176.0 Tm
0.0000 Tw
(        my @m852 = $x->getupdate\($loc852\); ) Tj
1 0 0 1 102.0 164.0 Tm
0.0000 Tw
(        $x->deletemarc\($loc852\); ) Tj
1 0 0 1 102.0 152.0 Tm
0.0000 Tw
(            # change @m852 as desired ) Tj
1 0 0 1 102.0 140.0 Tm
0.0000 Tw
(        $x->updaterecord\($loc852, @m852fix\); ) Tj
1 0 0 1 102.0 128.0 Tm
0.0000 Tw
(    \} ) Tj
1 0 0 1 102.0 116.0 Tm
0.0000 Tw
(    else \{ ) Tj
1 0 0 1 102.0 104.0 Tm
0.0000 Tw
(        $x->addfield\($loc852, @m852new\); ) Tj
1 0 0 1 102.0 92.0 Tm
0.0000 Tw
(    \} ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 517.44 37 Tm
(3) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
27 0 obj
5558
endobj
28 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F02 8 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
29 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 28 0 R
/Contents 26 0 R
>>
endobj
30 0 obj
<<
/Length 31 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F00 10 Tf
1 0 0 1 102.0 770.0 Tm
3.2583 Tw
(The following methods are specifically designed to work together using ) Tj
/F02 10 Tf
3.2583 Tw
(Option Templates) Tj
/F00 10 Tf
3.2583 Tw
(. The) Tj
1 0 0 1 102.0 758.0 Tm
1.5446 Tw
() Tj
/F01 10 Tf
1.5446 Tw
(required) Tj
/F00 10 Tf
1.5446 Tw
( options are shown as ) Tj
/F01 10 Tf
1.5446 Tw
(bold) Tj
/F00 10 Tf
1.5446 Tw
(. Any ) Tj
/F10 10 Tf
1.5446 Tw
(\(default\)) Tj
/F00 10 Tf
1.5446 Tw
( options are shown in parentheses. Although) Tj
1 0 0 1 102.0 746.0 Tm
0.5053 Tw
() Tj
/F01 10 Tf
0.5053 Tw
(deletemarc\(\)) Tj
/F00 10 Tf
0.5053 Tw
( permits an array for the ) Tj
/F02 10 Tf
0.5053 Tw
(record) Tj
/F00 10 Tf
0.5053 Tw
( option, a single ) Tj
/F02 10 Tf
0.5053 Tw
(record) Tj
/F00 10 Tf
0.5053 Tw
( should be used in a Template. The) Tj
1 0 0 1 102.0 734.0 Tm
0.7367 Tw
() Tj
/F02 10 Tf
0.7367 Tw
(subfield) Tj
/F00 10 Tf
0.7367 Tw
( option must not be used in a Template that uses both ) Tj
/F01 10 Tf
0.7367 Tw
(deletemarc) Tj
/F00 10 Tf
0.7367 Tw
( and one of the methods that) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(acts on a complete ) Tj
/F02 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
( like ) Tj
/F01 10 Tf
0.0000 Tw
(addfield\(\)) Tj
/F00 10 Tf
0.0000 Tw
(. The ) Tj
/F02 10 Tf
0.0000 Tw
(value) Tj
/F00 10 Tf
0.0000 Tw
( option must not be used with ) Tj
/F01 10 Tf
0.0000 Tw
(updaterecord\(\)) Tj
/F00 10 Tf
0.0000 Tw
(. ) Tj
/F00 10 Tf
1 0 0 1 126.0 698.0 Tm
0.0000 Tw
(deletemarc\(\)    - field \(all\), record \(all\), subfield [supplemental] ) Tj
/F00 10 Tf
1 0 0 1 126.0 686.0 Tm
0.0000 Tw
(searchmarc\(\)    - ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, regex, notregex, subfield [supplemental] ) Tj
/F00 10 Tf
1 0 0 1 126.0 674.0 Tm
0.0000 Tw
(getvalue\(\)      - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, subfield, delimiter [supplemental] ) Tj
/F00 10 Tf
1 0 0 1 126.0 662.0 Tm
0.0000 Tw
(getfirstvalue\(\) - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, subfield, delimiter [supplemental] ) Tj
/F00 10 Tf
1 0 0 1 126.0 650.0 Tm
0.0000 Tw
(getupdate\(\)     - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 638.0 Tm
0.0000 Tw
(getfields\(\)     - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(  ) Tj
/F00 10 Tf
1 0 0 1 126.0 626.0 Tm
0.0000 Tw
(addfield\(\)      - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, i1 \(' '\), i2 \(' '\), value, ordered \(`y'\) ) Tj
/F00 10 Tf
1 0 0 1 126.0 614.0 Tm
0.0000 Tw
(updaterecord\(\)  - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, i1 \(' '\), i2 \(' '\), ordered \(`y'\) ) Tj
/F00 10 Tf
1 0 0 1 126.0 602.0 Tm
0.0000 Tw
(updatefields\(\)  - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(  ) Tj
/F00 10 Tf
1 0 0 1 126.0 590.0 Tm
0.0000 Tw
(deletefirst\(\)   - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, subfield ) Tj
/F00 10 Tf
1 0 0 1 126.0 578.0 Tm
0.0000 Tw
(updatefirst\(\)   - ) Tj
/F01 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
(, ) Tj
/F01 10 Tf
0.0000 Tw
(field) Tj
/F00 10 Tf
0.0000 Tw
(, subfield, i1,i2 ) Tj
/F00 10 Tf
1 0 0 1 102.0 554.0 Tm
0.4143 Tw
(Methods that accept a ) Tj
/F02 10 Tf
0.4143 Tw
(subfield) Tj
/F00 10 Tf
0.4143 Tw
( option also accept specifying it as a supplemental parameter. \(Deletefirst) Tj
1 0 0 1 102.0 542.0 Tm
1.5025 Tw
(and updatefirst are the only exceptions\).  Supplemental parameters append/overwrite the hash values) Tj
1 0 0 1 102.0 530.0 Tm
0.0000 Tw
(specified in the template. ) Tj
/F10 10 Tf
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(    $x->deletemarc\($loc852, 'subfield','k'\); ) Tj
1 0 0 1 102.0 494.0 Tm
0.0000 Tw
(    my $f260 = \{field=>"260",regex=>"/19../"\}; ) Tj
1 0 0 1 102.0 482.0 Tm
0.0000 Tw
(    my @records=$x->searchmarc\($f260,'subfield','c'\); ) Tj
1 0 0 1 102.0 470.0 Tm
0.0000 Tw
(    foreach $found \(@records\) \{ ) Tj
1 0 0 1 102.0 458.0 Tm
0.0000 Tw
(        $value = $x->getvalue\($f260,'record',"$found",'field',"245"\); ) Tj
1 0 0 1 102.0 446.0 Tm
0.0000 Tw
(        print "TITLE: $value\\n"; ) Tj
1 0 0 1 102.0 434.0 Tm
0.0000 Tw
(    \} ) Tj
/F21 12 Tf
1 0 0 1 72.0 416.0 Tm
0.0000 Tw
(METHODS ) Tj
/F00 10 Tf
1 0 0 1 102.0 401.6 Tm
1.1689 Tw
(Here is a list of the methods in MARC.pm that are available to you for reading in, manipulating and) Tj
1 0 0 1 102.0 389.6 Tm
0.0000 Tw
(outputting MARC data. ) Tj
/F21 10 Tf
1 0 0 1 72.0 371.6 Tm
0.0000 Tw
(new\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 359.6 Tm
0.0000 Tw
(Creates a new MARC object.  ) Tj
/F10 10 Tf
1 0 0 1 102.0 347.6 Tm
0.0000 Tw
(    $x = MARC->new\(\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 323.6 Tm
0.0906 Tw
(You can also use the optional ) Tj
/F02 10 Tf
0.0906 Tw
(file) Tj
/F00 10 Tf
0.0906 Tw
( and ) Tj
/F02 10 Tf
0.0906 Tw
(format) Tj
/F00 10 Tf
0.0906 Tw
( parameters to create and populate the object with data from) Tj
1 0 0 1 102.0 311.6 Tm
0.1428 Tw
(a file. If a file is specified it will read in the entire file. If you wish to read in only portions of the file see) Tj
1 0 0 1 102.0 299.6 Tm
0.1807 Tw
(openmarc\(\), nextmarc\(\), and closemarc\(\) below. The ) Tj
/F02 10 Tf
0.1807 Tw
(format) Tj
/F00 10 Tf
0.1807 Tw
( defaults to ) Tj
/F10 10 Tf
0.1807 Tw
(`usmarc') Tj
/F00 10 Tf
0.1807 Tw
( if not specified. It is) Tj
1 0 0 1 102.0 287.6 Tm
0.0000 Tw
(only used when a ) Tj
/F02 10 Tf
0.0000 Tw
(file) Tj
/F00 10 Tf
0.0000 Tw
( is given. ) Tj
/F10 10 Tf
1 0 0 1 102.0 275.6 Tm
0.0000 Tw
(    $x = MARC->new\("mymarc.dat","usmarc"\); ) Tj
1 0 0 1 102.0 263.6 Tm
0.0000 Tw
(    $x = MARC->new\("mymarcmaker.mkr","marcmaker"\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 239.6 Tm
0.0000 Tw
(Creates a new MARC::Rec object. ) Tj
/F10 10 Tf
1 0 0 1 102.0 227.6 Tm
0.0000 Tw
(    $rec=MARC::Rec->new\(\); ) Tj
1 0 0 1 102.0 215.6 Tm
0.0000 Tw
(    $rec=MARC::Rec->new\($filehandle,"usmarc"\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 191.6 Tm
2.1014 Tw
(MARC::Rec objects are typically created by reading from a filehandle using nextrec\(\) and a proto) Tj
1 0 0 1 102.0 179.6 Tm
0.0000 Tw
(MARC::Rec object or by directly stuffing the @\{$rec-) Tj
/F00 10 Tf
0.0000 Tw
(\{`array`\}\} array. ) Tj
/F21 10 Tf
1 0 0 1 72.0 149.6 Tm
0.0000 Tw
(openmarc\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 137.6 Tm
0.9788 Tw
(Opens a specified file for reading data into a MARC object. If no format is specified openmarc\(\) will) Tj
1 0 0 1 102.0 125.6 Tm
0.7013 Tw
(default to USMARC. The ) Tj
/F02 10 Tf
0.7013 Tw
(increment) Tj
/F00 10 Tf
0.7013 Tw
( parameter defines how many records you would like to read from) Tj
1 0 0 1 102.0 113.6 Tm
0.9771 Tw
(the file. If no ) Tj
/F02 10 Tf
0.9771 Tw
(increment) Tj
/F00 10 Tf
0.9771 Tw
( is defined then the file will just be opened, and no records will be read in. If) Tj
1 0 0 1 102.0 101.6 Tm
0.0000 Tw
() Tj
/F02 10 Tf
0.0000 Tw
(increment) Tj
/F00 10 Tf
0.0000 Tw
( is set to -1 then the entire file will be read in. ) Tj
/F10 10 Tf
1 0 0 1 102.0 89.6 Tm
0.0000 Tw
(    $x = new MARC; ) Tj
1 0 0 1 102.0 77.6 Tm
0.0000 Tw
(    $x->openmarc\(\{file=>"mymarc.dat",'format'=>"usmarc", ) Tj
1 0 0 1 198.0 65.6 Tm
0.0000 Tw
(  increment=>"1"\}\); ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(4) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
31 0 obj
7824
endobj
32 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F01 7 0 R
/F02 8 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
33 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 32 0 R
/Contents 30 0 R
>>
endobj
34 0 obj
<<
/Length 35 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(    $x->openmarc\(\{file=>"mymarcmaker.mkr",'format'=>"marcmaker", ) Tj
1 0 0 1 198.0 746.0 Tm
0.0000 Tw
(  increment=>"5"\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 722.0 Tm
0.3424 Tw
(note: openmarc\(\) will return the number of records read in. If the file opens successfully, but no records) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
(are read, it returns ) Tj
/F10 10 Tf
0.0000 Tw
("0 but true") Tj
/F00 10 Tf
0.0000 Tw
(. For example: ) Tj
/F10 10 Tf
1 0 0 1 102.0 698.0 Tm
0.0000 Tw
(    $y=$x->openmarc\(\{file=>"mymarc.dat",'format'=>"usmarc", ) Tj
1 0 0 1 198.0 686.0 Tm
0.0000 Tw
(     increment=>"5"\}\); ) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(    print "Read in $y records!"; ) Tj
/F00 10 Tf
1 0 0 1 102.0 650.0 Tm
1.1093 Tw
(When the ) Tj
/F02 10 Tf
1.1093 Tw
(MARCMaker) Tj
/F00 10 Tf
1.1093 Tw
( format is specified, the ) Tj
/F02 10 Tf
1.1093 Tw
(lineterm) Tj
/F00 10 Tf
1.1093 Tw
( parameter can be used to override the CRLF) Tj
1 0 0 1 102.0 638.0 Tm
1.5377 Tw
(line-ending default \(the format was originally released for MS-DOS\). A ) Tj
/F02 10 Tf
1.5377 Tw
(charset) Tj
/F00 10 Tf
1.5377 Tw
( parameter accepts a) Tj
1 0 0 1 102.0 626.0 Tm
1.3154 Tw
(hash-reference to a user supplied character translation table. The "usmarc.txt" table supplied with the) Tj
1 0 0 1 102.0 614.0 Tm
0.5687 Tw
(LoC. MARCMaker utility is used internally as the default. You can use the ) Tj
/F01 10 Tf
0.5687 Tw
(usmarc_default) Tj
/F00 10 Tf
0.5687 Tw
( method to) Tj
1 0 0 1 102.0 602.0 Tm
0.0000 Tw
(get a hash-reference to it if you only want to modify a couple of characters. See example below. ) Tj
/F10 10 Tf
1 0 0 1 102.0 590.0 Tm
0.0000 Tw
(    $x->openmarc\(\{file=>"makrbrkr.mrc",'format'=>"marcmaker", ) Tj
1 0 0 1 198.0 578.0 Tm
0.0000 Tw
(  increment=>"5",lineterm=>"\\n", ) Tj
1 0 0 1 198.0 566.0 Tm
0.0000 Tw
(  charset=>\\%char_hash\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 542.0 Tm
0.8500 Tw
(openmarc inherits some error checking sanity checks from MARC::Rec::nextrec.  These will lead it to) Tj
1 0 0 1 102.0 530.0 Tm
0.0145 Tw
(return the negative of the number of records read in if there is a header length error. This behavior can be) Tj
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(suppressed with an option: ) Tj
/F10 10 Tf
1 0 0 1 102.0 506.0 Tm
0.0000 Tw
(    $x->openmarc\(\{file=>"mymarc.dat", format=>"usmarc", ) Tj
1 0 0 1 198.0 494.0 Tm
0.0000 Tw
(  increment=> 1, strict => 0\}\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 476.0 Tm
0.0000 Tw
(nextmarc\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 464.0 Tm
0.7920 Tw
(Once a file is open nextmarc\(\) can be used to read in the next group of records. The increment can be) Tj
1 0 0 1 102.0 452.0 Tm
0.5415 Tw
(passed to change the number of records read in if necessary. An increment of -1 will read in the rest of) Tj
1 0 0 1 102.0 440.0 Tm
0.1887 Tw
(the file. Specifying the increment will change the value set with openmarc\(\). Otherwise, that value is the) Tj
1 0 0 1 102.0 428.0 Tm
0.0000 Tw
(default. ) Tj
/F10 10 Tf
1 0 0 1 102.0 416.0 Tm
0.0000 Tw
(    $x->nextmarc\(\); ) Tj
1 0 0 1 102.0 404.0 Tm
0.0000 Tw
(    $x->nextmarc\(10\); ) Tj
1 0 0 1 102.0 392.0 Tm
0.0000 Tw
(    $x->nextmarc\(-1\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
(note: Similar to openmarc\(\), nextmarc\(\) will return the number of records read in.  ) Tj
/F10 10 Tf
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
(    $y=$x->nextmarc\(\); ) Tj
1 0 0 1 102.0 344.0 Tm
0.0000 Tw
(    print "$y more records read in!"; ) Tj
/F21 10 Tf
1 0 0 1 72.0 326.0 Tm
0.0000 Tw
(nextrec\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 314.0 Tm
0.5173 Tw
(MARC:Rec instances can read from a filehandle and produce a new MARC::Rec instance. If nextrec is) Tj
1 0 0 1 102.0 302.0 Tm
0.5594 Tw
(passed a string, it will read from that instead. The string should be formatted according to the \{format\}) Tj
1 0 0 1 102.0 290.0 Tm
0.0000 Tw
(field of the instance. ) Tj
/F00 10 Tf
1 0 0 1 102.0 278.0 Tm
0.0000 Tw
(Cases where a new instance cannot be created are classified by a status value: ) Tj
/F10 10 Tf
1 0 0 1 102.0 266.0 Tm
0.0000 Tw
(    my \($newrec,$status\) = $rec->nextrec\(\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 242.0 Tm
0.4580 Tw
($status is undefined if we are at the end of the filehandle. If the data read from the filehandle cannot be) Tj
1 0 0 1 102.0 230.0 Tm
1.1663 Tw
(made into a marc record, $status will be negative.  For example, $status is -1 if there is a distinction) Tj
1 0 0 1 102.0 218.0 Tm
0.0000 Tw
(between recsize and leader definition of recsize, and -2 if the leader is not numeric. ) Tj
/F00 10 Tf
1 0 0 1 102.0 206.0 Tm
0.0000 Tw
(An idiom for reading records incrementally with MARC::Recs is: ) Tj
/F10 10 Tf
1 0 0 1 102.0 194.0 Tm
0.0000 Tw
(    my $proto=MARC::Rec->new\($filehandle,$format\); ) Tj
1 0 0 1 102.0 182.0 Tm
0.0000 Tw
(    while \(1\) \{ ) Tj
1 0 0 1 150.0 170.0 Tm
0.0000 Tw
(  my \($rec,$status\)=$proto->nextrec\(\); ) Tj
1 0 0 1 150.0 158.0 Tm
0.0000 Tw
(  last unless $status; ) Tj
1 0 0 1 150.0 146.0 Tm
0.0000 Tw
(  die "Bad record, bad, bad record: error $status" ) Tj
1 0 0 1 150.0 134.0 Tm
0.0000 Tw
(      if $status <0; ) Tj
1 0 0 1 150.0 122.0 Tm
0.0000 Tw
(  print $rec->output\(\{$format=>'ascii'\}\); ) Tj
1 0 0 1 150.0 110.0 Tm
0.0000 Tw
(  # or replace print and output with your own functions/methods. ) Tj
1 0 0 1 102.0 98.0 Tm
0.0000 Tw
(    \} ) Tj
1 0 0 1 102.0 86.0 Tm
0.0000 Tw
(    close $filehandle or die "File $filehandle is not happy on close\\n"; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 517.44 37 Tm
(5) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
35 0 obj
5694
endobj
36 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F01 7 0 R
/F02 8 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
37 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 36 0 R
/Contents 34 0 R
>>
endobj
38 0 obj
<<
/Length 39 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F00 10 Tf
1 0 0 1 102.0 770.0 Tm
0.0000 Tw
(If you are getting records from an external source as strings, the idiom is: ) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(    my $proto=MARC::Rec->new\($filehandle,$format\); ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(    while \(1\) \{ ) Tj
1 0 0 1 102.0 734.0 Tm
0.0000 Tw
(          my $string = get_external_marc\(\); ) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(          last unless $string; ) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
(          my \($rec,$status\)=$proto->nextrec\($string\); ) Tj
1 0 0 1 102.0 698.0 Tm
0.0000 Tw
(          last unless $status; ) Tj
1 0 0 1 102.0 686.0 Tm
0.0000 Tw
(          die "Bad record, bad, bad record: error $status" ) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(              if $status <0; ) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(          print $rec->output\(\{$format=>'ascii'\}\); ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(          # or replace print and output with your own functions/methods. ) Tj
1 0 0 1 102.0 638.0 Tm
0.0000 Tw
(    \} ) Tj
/F21 10 Tf
1 0 0 1 72.0 620.0 Tm
0.0000 Tw
(closemarc\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 608.0 Tm
0.0000 Tw
(If you are finished reading in records from a file you should close it immediately. ) Tj
/F10 10 Tf
1 0 0 1 102.0 596.0 Tm
0.0000 Tw
(    $x->closemarc\(\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 578.0 Tm
0.0000 Tw
(add_map\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 566.0 Tm
0.6418 Tw
(add_map\(\) takes a recnum and a ref to a field in \($tag, $i1,$i2,a=) Tj
/F00 10 Tf
0.6418 Tw
("bar",...\) or \($tag, $field\) formats and) Tj
1 0 0 1 102.0 554.0 Tm
0.2065 Tw
(will append to the various indices that we have hanging off that record.  It is intended for use in creating) Tj
1 0 0 1 102.0 542.0 Tm
1.3006 Tw
(records de novo and as a component for rebuild_map\(\). It carefully does not copy subfield values or) Tj
1 0 0 1 102.0 530.0 Tm
2.5400 Tw
(entire fields, maintaining some reference relationships.  What this means for indices created with) Tj
1 0 0 1 102.0 518.0 Tm
0.7800 Tw
(add_map that you can directly edit subfield values in $marc-) Tj
/F00 10 Tf
0.7800 Tw
([recnum]\{array\} and the index will adjust) Tj
1 0 0 1 102.0 506.0 Tm
0.1720 Tw
(automatically. Vice-versa, if you edit subfield values in $marc-) Tj
/F00 10 Tf
0.1720 Tw
(\{recnum\}\{tag\}\{subfield_code\} the fields) Tj
1 0 0 1 102.0 494.0 Tm
1.4357 Tw
(in $marc-) Tj
/F00 10 Tf
1.4357 Tw
([recnum]\{array\} will adjust. If you change structural information in the array with such an) Tj
1 0 0 1 102.0 482.0 Tm
0.7885 Tw
(index, you must rebuild the part of the index related to the current tag \(and possibly the old tag if you) Tj
1 0 0 1 102.0 470.0 Tm
0.0000 Tw
(change the tag\). ) Tj
/F10 10 Tf
1 0 0 1 102.0 458.0 Tm
0.0000 Tw
(   use MARC 1.02; ) Tj
1 0 0 1 102.0 446.0 Tm
0.0000 Tw
(   while \(<>\) \{ ) Tj
1 0 0 1 102.0 434.0 Tm
0.0000 Tw
(        chomp; ) Tj
1 0 0 1 102.0 422.0 Tm
0.0000 Tw
(        my \($author,$title\) = split\(/\\t/\); ) Tj
1 0 0 1 102.0 410.0 Tm
0.0000 Tw
(        my $rnum = $x->createrecord\(\{leader=> ) Tj
1 0 0 1 246.0 398.0 Tm
0.0000 Tw
(    ) Tj
1 0 0 1 294.0 398.0 Tm
0.0000 Tw
(       "00000nmm  2200000 a 4500"\}\); ) Tj
1 0 0 1 102.0 374.0 Tm
0.0000 Tw
(        my @auth = \(100, ' ', ' ', a=>$author\); ) Tj
1 0 0 1 102.0 362.0 Tm
0.0000 Tw
(        my @title = \(245, ' ', ' ', a=>$title\); ) Tj
1 0 0 1 102.0 350.0 Tm
0.0000 Tw
(        push @\{$x->[$rnum]\{array\}\}, \\@auth; ) Tj
1 0 0 1 102.0 338.0 Tm
0.0000 Tw
(        $x->add_map\($rnum,\\@auth\); ) Tj
1 0 0 1 102.0 326.0 Tm
0.0000 Tw
(        push @\{$x->[$rnum]\{array\}\}, \\@title; ) Tj
1 0 0 1 102.0 314.0 Tm
0.0000 Tw
(        $x->add_map\($rnum,\\@title\); ) Tj
1 0 0 1 102.0 302.0 Tm
0.0000 Tw
(   \} ) Tj
/F00 10 Tf
1 0 0 1 102.0 278.0 Tm
2.8683 Tw
(MARC::Rec::add_map\($rfield\) does not need the record specification and has the same effect as) Tj
1 0 0 1 102.0 266.0 Tm
0.0000 Tw
(add_map. ) Tj
/F21 10 Tf
1 0 0 1 72.0 248.0 Tm
0.0000 Tw
(rebuild_map ) Tj
/F00 10 Tf
1 0 0 1 102.0 236.0 Tm
1.3218 Tw
(rebuild_map takes a recnum and a tag and will synchronize the index with the array elements of the) Tj
1 0 0 1 102.0 224.0 Tm
0.0000 Tw
(marc record at the recnum with that tag. ) Tj
/F10 10 Tf
1 0 0 1 102.0 212.0 Tm
0.0000 Tw
(      #Gonna change all 099's to 092's since this is a music collection. ) Tj
1 0 0 1 102.0 200.0 Tm
0.0000 Tw
(      grep \{$->[0] =~s/099/092\} @\{$x->[$recnum]\{array\}\}; ) Tj
1 0 0 1 102.0 176.0 Tm
0.0000 Tw
(      #Oops, now the index is out of date on the 099's... ) Tj
1 0 0 1 102.0 164.0 Tm
0.0000 Tw
(      $x->rebuild_map\($recnum,099\); ) Tj
1 0 0 1 102.0 152.0 Tm
0.0000 Tw
(      #... and the 092's since we now have new ones. ) Tj
1 0 0 1 102.0 140.0 Tm
0.0000 Tw
(      $x->rebuild_map\($recnum,092\); ) Tj
1 0 0 1 102.0 128.0 Tm
0.0000 Tw
(      #All fixed. ) Tj
/F00 10 Tf
1 0 0 1 102.0 104.0 Tm
4.2100 Tw
(MARC::Rec::rebuild_map\($tag\) does not need the record number and has the same effect as) Tj
1 0 0 1 102.0 92.0 Tm
0.0000 Tw
(rebuild_map. ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(6) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
39 0 obj
5244
endobj
40 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
41 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 40 0 R
/Contents 38 0 R
>>
endobj
42 0 obj
<<
/Length 43 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F21 10 Tf
1 0 0 1 72.0 770.0 Tm
0.0000 Tw
(rebuild_map_all ) Tj
/F00 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0482 Tw
(rebuild_map takes a recnum and will synchronize the index with the array elements of the marc record at) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(the recnum. ) Tj
/F00 10 Tf
1 0 0 1 102.0 734.0 Tm
4.3950 Tw
(MARC::Rec::rebuild_map_all\(\) does not need the record number and has the same effect as) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(rebuild_map_all. ) Tj
/F21 10 Tf
1 0 0 1 72.0 704.0 Tm
0.0000 Tw
(getfields ) Tj
/F00 10 Tf
1 0 0 1 102.0 692.0 Tm
1.8737 Tw
(getfields takes a template and returns an array of fieldrefs from the record number implied by that) Tj
1 0 0 1 102.0 680.0 Tm
0.1947 Tw
(template. The fields referred are  fields from the $marc-) Tj
/F00 10 Tf
0.1947 Tw
([$recnum]\{array\} group. The fields are all fields) Tj
1 0 0 1 102.0 668.0 Tm
0.6780 Tw
(from the first one with the tag from the template to the last with that tag. Some marc records \(e.g. cjk\)) Tj
1 0 0 1 102.0 656.0 Tm
0.6176 Tw
(may have fields with other tags mixed in. Consecutive calls to updatefields with a different tag and the) Tj
1 0 0 1 102.0 644.0 Tm
0.4939 Tw
(same record are probably a bad idea unless you have assurance that fields with the same tag are always) Tj
1 0 0 1 102.0 632.0 Tm
0.0000 Tw
(together. ) Tj
/F00 10 Tf
1 0 0 1 102.0 620.0 Tm
0.0000 Tw
(MARC::Rec::getfields is identical to getfields, but ignores any record specification in the template. ) Tj
/F21 10 Tf
1 0 0 1 72.0 602.0 Tm
0.0000 Tw
(marc_count\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 590.0 Tm
0.1344 Tw
(Returns the total number of records in a MARC object. This method was previously named ) Tj
/F01 10 Tf
0.1344 Tw
(length\(\)) Tj
/F00 10 Tf
0.1344 Tw
(, but) Tj
1 0 0 1 102.0 578.0 Tm
0.5679 Tw
(that conflicts with the Perl built-in of the same name. Use the new name, the old one is deprecated and) Tj
1 0 0 1 102.0 566.0 Tm
0.0000 Tw
(will disappear shortly. ) Tj
/F10 10 Tf
1 0 0 1 102.0 554.0 Tm
0.0000 Tw
(    $length=$x->marc_count\(\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 536.0 Tm
0.0000 Tw
(getfirstvalue\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 524.0 Tm
1.3256 Tw
(getfirstvalue will return the first value of a field or subfield or indicator or i12 in a particular record) Tj
1 0 0 1 102.0 512.0 Tm
0.0000 Tw
(found in the MARC object. It does not depend on the index being up to date. ) Tj
/F00 10 Tf
1 0 0 1 102.0 500.0 Tm
2.9736 Tw
(MARC::Rec::getfirstvalue is identical to getfirstvalue, but ignores any record specification in the) Tj
1 0 0 1 102.0 488.0 Tm
0.0000 Tw
(template. ) Tj
/F21 10 Tf
1 0 0 1 72.0 470.0 Tm
0.0000 Tw
(getvalue\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 458.0 Tm
0.2925 Tw
(This method will retrieve MARC field data from a specific record in the MARC object. getvalue\(\) takes) Tj
1 0 0 1 102.0 446.0 Tm
0.0364 Tw
(four parameters: ) Tj
/F02 10 Tf
0.0364 Tw
(record) Tj
/F00 10 Tf
0.0364 Tw
(, ) Tj
/F02 10 Tf
0.0364 Tw
(field) Tj
/F00 10 Tf
0.0364 Tw
(, ) Tj
/F02 10 Tf
0.0364 Tw
(subfield) Tj
/F00 10 Tf
0.0364 Tw
(, and ) Tj
/F02 10 Tf
0.0364 Tw
(delimiter) Tj
/F00 10 Tf
0.0364 Tw
(. Since a single MARC record could contain several) Tj
1 0 0 1 102.0 434.0 Tm
0.1571 Tw
(of the fields or subfields the results are returned to you as an array. If you only pass ) Tj
/F02 10 Tf
0.1571 Tw
(record) Tj
/F00 10 Tf
0.1571 Tw
( and ) Tj
/F02 10 Tf
0.1571 Tw
(field) Tj
/F00 10 Tf
0.1571 Tw
( you) Tj
1 0 0 1 102.0 422.0 Tm
0.5880 Tw
(will be returned the entire field without subfield delimiters. Optionally you can use ) Tj
/F02 10 Tf
0.5880 Tw
(delimiter) Tj
/F00 10 Tf
0.5880 Tw
( to specify) Tj
1 0 0 1 102.0 410.0 Tm
0.5222 Tw
(what character to use for the delimiter, and you will also get the subfield delimiters. If you also specify) Tj
1 0 0 1 102.0 398.0 Tm
0.9580 Tw
() Tj
/F02 10 Tf
0.9580 Tw
(subfield) Tj
/F00 10 Tf
0.9580 Tw
( your results will be limited to just the contents of that subfield. Repeated subfield occurances) Tj
1 0 0 1 102.0 386.0 Tm
0.2606 Tw
(will end up in separate array elements in the order in which they were read in. The ) Tj
/F02 10 Tf
0.2606 Tw
(subfield) Tj
/F00 10 Tf
0.2606 Tw
( designations) Tj
1 0 0 1 102.0 374.0 Tm
0.0000 Tw
() Tj
/F10 10 Tf
0.0000 Tw
(`i1`, `i2' and `i12') Tj
/F00 10 Tf
0.0000 Tw
( can be used to get indicator\(s\). ) Tj
/F10 10 Tf
1 0 0 1 102.0 362.0 Tm
0.0000 Tw
(        #get the 650 field\(s\) ) Tj
1 0 0 1 102.0 350.0 Tm
0.0000 Tw
(    @results = $x->getvalue\(\{record=>'1',field=>'650'\}\);  ) Tj
1 0 0 1 150.0 326.0 Tm
0.0000 Tw
(#get the 650 field\(s\) with subfield delimiters \(ie. |x |v etc\) ) Tj
1 0 0 1 102.0 314.0 Tm
0.0000 Tw
(    @results = $x->getvalue\(\{record=>'1',field=>'650',delimiter=>'|'\}\); ) Tj
1 0 0 1 102.0 290.0 Tm
0.0000 Tw
(        #get all of the subfield u's from the 856 field ) Tj
1 0 0 1 102.0 278.0 Tm
0.0000 Tw
(    @results = $x->getvalue\(\{record=>'12',field=>'856',subfield=>'u'\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 254.0 Tm
0.0000 Tw
(MARC::Rec::getvalue\($template\) is identical to getvalue, but ignores any record specification. ) Tj
/F21 10 Tf
1 0 0 1 72.0 236.0 Tm
0.0000 Tw
(unpack_ldr\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 224.0 Tm
0 Tw
(Returns a ref to a hash version of the record`th LDR. Installs the ref in $marc as) Tj
1 0 0 1 102.0 212.0 Tm
0.0000 Tw
($marc-) Tj
/F00 10 Tf
0.0000 Tw
([$record]\{unp_ldr\} ) Tj
/F10 10 Tf
1 0 0 1 102.0 200.0 Tm
0.0000 Tw
(    my $rldr = $x->unpack_ldr\(1\); ) Tj
1 0 0 1 102.0 188.0 Tm
0.0000 Tw
(    print "Desc is $rldr\{Desc\}"; ) Tj
1 0 0 1 102.0 176.0 Tm
0.0000 Tw
(    my \($m040\) = $x->getvalues\(\{record=>'1',field=>'040'\}\); ) Tj
1 0 0 1 102.0 164.0 Tm
0.0000 Tw
(    print "First record is LC, let's leave it alone"  ) Tj
1 0 0 1 102.0 152.0 Tm
0.0000 Tw
(          if $rldr->\{'Desc'\} eq 'a' && $m040=~/DLC\\s*\\c_c\\s*DLC/;  ) Tj
/F00 10 Tf
1 0 0 1 102.0 128.0 Tm
0.0000 Tw
(The hash version contains the following information: ) Tj
/F10 10 Tf
1 0 0 1 150.0 116.0 Tm
0.0000 Tw
(Key) Tj
1 0 0 1 246.0 116.0 Tm
0.0000 Tw
(000-Pos) Tj
1 0 0 1 294.0 116.0 Tm
0.0000 Tw
(length) Tj
1 0 0 1 342.0 116.0 Tm
0.0000 Tw
(Function [standard value] ) Tj
1 0 0 1 150.0 104.0 Tm
0.0000 Tw
(---     ) Tj
1 0 0 1 246.0 104.0 Tm
0.0000 Tw
(-------) Tj
1 0 0 1 294.0 104.0 Tm
0.0000 Tw
(------) Tj
1 0 0 1 342.0 104.0 Tm
0.0000 Tw
(-------- ) Tj
1 0 0 1 150.0 92.0 Tm
0.0000 Tw
(rec_len) Tj
1 0 0 1 246.0 92.0 Tm
0.0000 Tw
(00-04) Tj
1 0 0 1 294.0 92.0 Tm
0.0000 Tw
(   5) Tj
1 0 0 1 342.0 92.0 Tm
0.0000 Tw
(Logical Record Length ) Tj
1 0 0 1 150.0 80.0 Tm
0.0000 Tw
(RecStat) Tj
1 0 0 1 246.0 80.0 Tm
0.0000 Tw
(05) Tj
1 0 0 1 294.0 80.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 80.0 Tm
0.0000 Tw
(Record Status ) Tj
1 0 0 1 150.0 68.0 Tm
0.0000 Tw
(Type) Tj
1 0 0 1 246.0 68.0 Tm
0.0000 Tw
(06) Tj
1 0 0 1 294.0 68.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 68.0 Tm
0.0000 Tw
(Type of Record ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 517.44 37 Tm
(7) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
43 0 obj
7089
endobj
44 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F01 7 0 R
/F02 8 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
45 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 44 0 R
/Contents 42 0 R
>>
endobj
46 0 obj
<<
/Length 47 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 150.0 758.0 Tm
0.0000 Tw
(BLvl) Tj
1 0 0 1 246.0 758.0 Tm
0.0000 Tw
(07) Tj
1 0 0 1 294.0 758.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 758.0 Tm
0.0000 Tw
(Bibliographic Level ) Tj
1 0 0 1 150.0 746.0 Tm
0.0000 Tw
(Ctrl) Tj
1 0 0 1 246.0 746.0 Tm
0.0000 Tw
(08) Tj
1 0 0 1 294.0 746.0 Tm
0.0000 Tw
(   1 ) Tj
1 0 0 1 150.0 734.0 Tm
0.0000 Tw
(Undefldr) Tj
1 0 0 1 246.0 734.0 Tm
0.0000 Tw
(09-11) Tj
1 0 0 1 294.0 734.0 Tm
0.0000 Tw
(   3) Tj
1 0 0 1 342.0 734.0 Tm
0.0000 Tw
([x22] ) Tj
1 0 0 1 150.0 722.0 Tm
0.0000 Tw
(base_addr) Tj
1 0 0 1 246.0 722.0 Tm
0.0000 Tw
(12-16) Tj
1 0 0 1 294.0 722.0 Tm
0.0000 Tw
(   5) Tj
1 0 0 1 342.0 722.0 Tm
0.0000 Tw
(Base Address of Data ) Tj
1 0 0 1 150.0 710.0 Tm
0.0000 Tw
(ELvl) Tj
1 0 0 1 246.0 710.0 Tm
0.0000 Tw
(17) Tj
1 0 0 1 294.0 710.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 710.0 Tm
0.0000 Tw
(Encoding Level ) Tj
1 0 0 1 150.0 698.0 Tm
0.0000 Tw
(Desc) Tj
1 0 0 1 246.0 698.0 Tm
0.0000 Tw
(18) Tj
1 0 0 1 294.0 698.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 698.0 Tm
0.0000 Tw
(Descriptive Cataloging Form ) Tj
1 0 0 1 150.0 686.0 Tm
0.0000 Tw
(ln_rec) Tj
1 0 0 1 246.0 686.0 Tm
0.0000 Tw
(19) Tj
1 0 0 1 294.0 686.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 686.0 Tm
0.0000 Tw
(Linked-Record Code ) Tj
1 0 0 1 150.0 674.0 Tm
0.0000 Tw
(len_len_field) Tj
1 0 0 1 246.0 674.0 Tm
0.0000 Tw
(20) Tj
1 0 0 1 294.0 674.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 674.0 Tm
0.0000 Tw
(Length "length of field" [4] ) Tj
1 0 0 1 150.0 662.0 Tm
0.0000 Tw
(len_start_char) Tj
1 0 0 1 246.0 662.0 Tm
0.0000 Tw
(21) Tj
1 0 0 1 294.0 662.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 662.0 Tm
0.0000 Tw
(Length "start char pos" [5] ) Tj
1 0 0 1 150.0 650.0 Tm
0.0000 Tw
(len_impl) Tj
1 0 0 1 246.0 650.0 Tm
0.0000 Tw
(22) Tj
1 0 0 1 294.0 650.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 650.0 Tm
0.0000 Tw
(Length "implementation dep" [0] ) Tj
1 0 0 1 150.0 638.0 Tm
0.0000 Tw
(Undef2ldr) Tj
1 0 0 1 246.0 638.0 Tm
0.0000 Tw
(23) Tj
1 0 0 1 294.0 638.0 Tm
0.0000 Tw
(   1) Tj
1 0 0 1 342.0 638.0 Tm
0.0000 Tw
([0] ) Tj
/F00 10 Tf
1 0 0 1 102.0 614.0 Tm
0.0000 Tw
(MARC::Rec::unpack_ldr\(\) is identical to unpack_ldr, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 596.0 Tm
0.0000 Tw
(get_hash_ldr\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 584.0 Tm
2.1474 Tw
(Takes a record number. Returns a ref to the cached version of the hash ldr if it exists. Does this) Tj
1 0 0 1 102.0 572.0 Tm
0.0000 Tw
(*without* overwriting the hash ldr. Allows external code to safely manipulate hash versions of the ldr. ) Tj
/F10 10 Tf
1 0 0 1 102.0 560.0 Tm
0.0000 Tw
(     my $rhldr = $marc->get_hash_ldr\($record\); ) Tj
1 0 0 1 102.0 548.0 Tm
0.0000 Tw
(     return undef unless $rhldr; ) Tj
1 0 0 1 102.0 536.0 Tm
0.0000 Tw
(     $rhldr->\{'Desc'\} =~ s/a/b/; ) Tj
1 0 0 1 102.0 524.0 Tm
0.0000 Tw
(     $ldr = $x->pack_ldr\($record\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 500.0 Tm
0.0000 Tw
(MARC::Rec::get_hash_ldr\(\) is identical to get_hash_ldr, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 482.0 Tm
0.0000 Tw
(pack_ldr\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 470.0 Tm
0.0000 Tw
(Takes a record number. Updates the appropriate ldr.  ) Tj
/F10 10 Tf
1 0 0 1 102.0 458.0 Tm
0.0000 Tw
(     $marc->[$record]\{'unp_ldr'\}\{'Desc'\} =~ s/a/b/; ) Tj
1 0 0 1 102.0 446.0 Tm
0.0000 Tw
(     my $ldr = $x->pack_ldr\($record\); ) Tj
1 0 0 1 102.0 434.0 Tm
0.0000 Tw
(     return undef unless $ldr; ) Tj
/F00 10 Tf
1 0 0 1 102.0 410.0 Tm
0.0000 Tw
(MARC::Rec::pack_ldr\(\) is identical to pack_ldr, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 392.0 Tm
0.0000 Tw
(bib_format\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 380.0 Tm
1.2406 Tw
(Takes a record number. Returns the "format" used in determining the meanings of the fixed fields in) Tj
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
(008. Will force update of the ldr based on any existing hash version. ) Tj
/F10 10 Tf
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
(      foreach $record \(1..$#$x\) \{ ) Tj
1 0 0 1 150.0 344.0 Tm
0.0000 Tw
(    next if $x->bib_format\($record\) eq 'SERIALS'; ) Tj
1 0 0 1 198.0 332.0 Tm
0.0000 Tw
(# serials are hard ) Tj
1 0 0 1 150.0 320.0 Tm
0.0000 Tw
(    do_something\($x->[record]\); ) Tj
1 0 0 1 102.0 308.0 Tm
0.0000 Tw
(      \} ) Tj
/F00 10 Tf
1 0 0 1 102.0 284.0 Tm
0.0000 Tw
(MARC::Rec::bib_format\(\) is identical to bib_format, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 266.0 Tm
0.0000 Tw
(unpack_008\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 254.0 Tm
3.4544 Tw
(Returns a ref to hash version of the 008 field, based on the field`s value. Installs the ref as) Tj
1 0 0 1 102.0 242.0 Tm
0.0000 Tw
($marc-) Tj
/F00 10 Tf
0.0000 Tw
([$record]\{unp_008\} ) Tj
/F10 10 Tf
1 0 0 1 102.0 230.0 Tm
0.0000 Tw
(      foreach $record \(1..$#$x\) \{ ) Tj
1 0 0 1 150.0 218.0 Tm
0.0000 Tw
(    my $rff = $x->unpack_008\($record\); ) Tj
1 0 0 1 150.0 206.0 Tm
0.0000 Tw
(    print "Record $record: Y2K problem possible" ) Tj
1 0 0 1 198.0 194.0 Tm
0.0000 Tw
(if \($rff->\{'Date1'\}=~/00/ or $rff->\{'Date2'\}=~/00/\); ) Tj
1 0 0 1 102.0 182.0 Tm
0.0000 Tw
(      \} ) Tj
/F00 10 Tf
1 0 0 1 102.0 158.0 Tm
0.0000 Tw
(MARC::Rec::unpack_008\(\) is identical to unpack_008, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 140.0 Tm
0.0000 Tw
(get_hash_008\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 128.0 Tm
1.9426 Tw
(Takes a record number. Returns a ref to the cached version of the hash 008 if it exists. Does this) Tj
1 0 0 1 102.0 116.0 Tm
0.1627 Tw
(*without* overwriting the hash 008. Allows external code to safely manipulate hash versions of the 008.) Tj
/F10 10 Tf
1 0 0 1 102.0 92.0 Tm
0.0000 Tw
(     my $rh008 = $marc->get_hash_008\($record\); ) Tj
1 0 0 1 102.0 80.0 Tm
0.0000 Tw
(     return undef unless $rh008; ) Tj
1 0 0 1 102.0 68.0 Tm
0.0000 Tw
(     $rh008->\{'Date1'\} =~ s/00/01/; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(8) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
47 0 obj
6099
endobj
48 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
49 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 48 0 R
/Contents 46 0 R
>>
endobj
50 0 obj
<<
/Length 51 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(     my $m008 = $x->pack_008\($record\); ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(     return undef unless $m008; ) Tj
/F00 10 Tf
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(MARC::Rec::get_hash_008\(\) is identical to get_hash_008, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 704.0 Tm
0.0000 Tw
(pack_008\($record\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 692.0 Tm
1.7641 Tw
(Takes a record number and updates the appropriate 008. Will force update of the ldr based on any) Tj
1 0 0 1 102.0 680.0 Tm
0.0000 Tw
(existing hash version. Updates the map for 008. ) Tj
/F10 10 Tf
1 0 0 1 102.0 668.0 Tm
0.0000 Tw
(      foreach $record \(1..$#$x\) \{ ) Tj
1 0 0 1 150.0 656.0 Tm
0.0000 Tw
(    my $rff = $x->unpack_008\($record\); ) Tj
1 0 0 1 150.0 644.0 Tm
0.0000 Tw
(    $rff->\{'Date1'\}='2000'; ) Tj
1 0 0 1 150.0 632.0 Tm
0.0000 Tw
(    print "Record:$record Y2K problem created\\n"; ) Tj
1 0 0 1 150.0 620.0 Tm
0.0000 Tw
(    $x->pack_008\($record\); ) Tj
1 0 0 1 150.0 608.0 Tm
0.0000 Tw
(    # New value is in the 008 field of $record'th marc ) Tj
1 0 0 1 102.0 596.0 Tm
0.0000 Tw
(      \} ) Tj
/F00 10 Tf
1 0 0 1 102.0 572.0 Tm
0.0000 Tw
(MARC::Rec::pack_008\(\) is identical to pack_008, but does not need the record number. ) Tj
/F21 10 Tf
1 0 0 1 72.0 554.0 Tm
0.0000 Tw
(deletefirst\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 542.0 Tm
0.4000 Tw
(deletefirst\(\) takes a template. It deletes the field data for a first match, using the template and leaves the) Tj
1 0 0 1 102.0 530.0 Tm
0.0000 Tw
(rest alone.  ) Tj
/F00 10 Tf
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(For example, assume that we have a marc file whose second record looks like: ) Tj
/F10 10 Tf
1 0 0 1 102.0 506.0 Tm
0.0000 Tw
(    =008  960221s1955\\\\\\\\dcuabcdjdbkoqu001\\0dspa\\d ) Tj
1 0 0 1 102.0 494.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{24\}35.99 ) Tj
1 0 0 1 102.0 482.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{curren\}35.99 ) Tj
1 0 0 1 102.0 470.0 Tm
0.0000 Tw
(    =040  \\\\$aViArRB$cViArRB ) Tj
1 0 0 1 102.0 458.0 Tm
0.0000 Tw
(    =100  2 $aDeer-Doe, Jane,$d1957- ) Tj
/F00 10 Tf
1 0 0 1 102.0 434.0 Tm
1.2625 Tw
(Assume we have placed this in a MARC object x. Then we can delete  an entire field of the second) Tj
1 0 0 1 102.0 422.0 Tm
0.0000 Tw
(record thus: ) Tj
/F10 10 Tf
1 0 0 1 102.0 410.0 Tm
0.0000 Tw
(    my $loc100 = \{record=>2,field=>100,rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 398.0 Tm
0.0000 Tw
(    $x->deletefirst\($loc100\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 374.0 Tm
0.0000 Tw
(The second record now looks like: ) Tj
/F10 10 Tf
1 0 0 1 102.0 362.0 Tm
0.0000 Tw
(    =008  960221s1955\\\\\\\\dcuabcdjdbkoqu001\\0dspa\\d ) Tj
1 0 0 1 102.0 350.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{24\}35.99 ) Tj
1 0 0 1 102.0 338.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{curren\}35.99 ) Tj
1 0 0 1 102.0 326.0 Tm
0.0000 Tw
(    =040  \\\\$aViArRB$cViArRB ) Tj
/F00 10 Tf
1 0 0 1 102.0 302.0 Tm
0.0000 Tw
(If the template has a subfield element it deletes based on the subfield information in the template. ) Tj
/F10 10 Tf
1 0 0 1 102.0 290.0 Tm
0.0000 Tw
(    $x->deletefirst\(\{record=>2,field=>020,subfield=>'c',rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 266.0 Tm
0.0000 Tw
(    =008  960221s1955\\\\\\\\dcuabcdjdbkoqu001\\0dspa\\d ) Tj
1 0 0 1 102.0 254.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 : ) Tj
1 0 0 1 102.0 242.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{curren\}35.99 ) Tj
1 0 0 1 102.0 230.0 Tm
0.0000 Tw
(    =040  \\\\$aViArRB$cViArRB ) Tj
/F00 10 Tf
1 0 0 1 102.0 194.0 Tm
0.0000 Tw
( If the last subfield of a field is deleted, deletefirst\(\) also deletes the field. ) Tj
/F10 10 Tf
1 0 0 1 102.0 182.0 Tm
0.0000 Tw
(    $x->deletefirst\(\{record=>2,field=>020,subfield=>'a',rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 158.0 Tm
0.0000 Tw
(    =008  960221s1955\\\\\\\\dcuabcdjdbkoqu001\\0dspa\\d ) Tj
1 0 0 1 102.0 146.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{curren\}35.99 ) Tj
1 0 0 1 102.0 134.0 Tm
0.0000 Tw
(    =040  \\\\$aViArRB$cViArRB ) Tj
/F00 10 Tf
1 0 0 1 102.0 98.0 Tm
0.0000 Tw
(  It complains about attempts to delete indicators.  ) Tj
/F10 10 Tf
1 0 0 1 102.0 86.0 Tm
0.0000 Tw
(    $x->deletefirst\(\{record=>2,field=>020,subfield=>'i1',rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 74.0 Tm
0.0000 Tw
(    OR ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 517.44 37 Tm
(9) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
51 0 obj
4524
endobj
52 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
53 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 52 0 R
/Contents 50 0 R
>>
endobj
54 0 obj
<<
/Length 55 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(    $x->deletefirst\(\{record=>2,field=>020,i1=>1,rebuild_map=>1\}; ) Tj
/F00 10 Tf
1 0 0 1 102.0 734.0 Tm
0.0000 Tw
(Produces a warning and leaves the record untouched. ) Tj
/F10 10 Tf
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
( If there is no match, it does nothing. ) Tj
1 0 0 1 102.0 698.0 Tm
0.0000 Tw
(    $x->deletefirst\(\{record=>2,field=>020,subfield=>'x',rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(    =008  960221s1955\\\\\\\\dcuabcdjdbkoqu001\\0dspa\\d ) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(    =020  \\\\$a0777000008 :$c\{curren\}35.99 ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(    =040  \\\\$aViArRB$cViArRB ) Tj
/F00 10 Tf
1 0 0 1 102.0 614.0 Tm
3.0455 Tw
( Deletefirst also rebuilds the map if the template asks for that) Tj
1 0 0 1 102.0 602.0 Tm
0.1776 Tw
($do_rebuild_map. Deletefirst returns the number of matches deleted \(that would be 0 or 1\), or undef if it) Tj
1 0 0 1 102.0 590.0 Tm
0.0000 Tw
(feels grumpy \(i.e. carps\). ) Tj
/F00 10 Tf
1 0 0 1 102.0 578.0 Tm
0.0964 Tw
(MARC::Rec::deletefirst\($template\) is identical to deletefirst, but ignores any record number specified by) Tj
1 0 0 1 102.0 566.0 Tm
0.0000 Tw
($template. ) Tj
/F00 10 Tf
1 0 0 1 102.0 554.0 Tm
0.0000 Tw
(Most use of deletefirst is expected to be by Tie::MARC. ) Tj
/F21 10 Tf
1 0 0 1 72.0 536.0 Tm
0.0000 Tw
(deletemarc\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 524.0 Tm
2.0100 Tw
(This method will allow you to remove a specific record, fields or subfields from a MARC object.) Tj
1 0 0 1 102.0 512.0 Tm
1.2831 Tw
(Accepted parameters include: ) Tj
/F02 10 Tf
1.2831 Tw
(record) Tj
/F00 10 Tf
1.2831 Tw
(, ) Tj
/F02 10 Tf
1.2831 Tw
(field) Tj
/F00 10 Tf
1.2831 Tw
( and ) Tj
/F02 10 Tf
1.2831 Tw
(subfield) Tj
/F00 10 Tf
1.2831 Tw
(. Note: you can use the .. operator to delete a) Tj
1 0 0 1 102.0 500.0 Tm
2.4627 Tw
(range of records. deletemarc\(\) will return the number of items deleted \(be they records, fields or) Tj
1 0 0 1 102.0 488.0 Tm
0.0000 Tw
(subfields\). The ) Tj
/F02 10 Tf
0.0000 Tw
(record) Tj
/F00 10 Tf
0.0000 Tw
( parameter is optional. It defaults to all user records [1..$#marc] if not specified. ) Tj
/F10 10 Tf
1 0 0 1 102.0 476.0 Tm
0.0000 Tw
(        #delete all the records in the object ) Tj
1 0 0 1 102.0 464.0 Tm
0.0000 Tw
(    $x->deletemarc\(\); ) Tj
1 0 0 1 102.0 440.0 Tm
0.0000 Tw
(        #delete records 1-5 and 7  ) Tj
1 0 0 1 102.0 428.0 Tm
0.0000 Tw
(    $x->deletemarc\(\{record=>[1..5,7]\}\); ) Tj
1 0 0 1 102.0 404.0 Tm
0.0000 Tw
(        #delete all of the 650 fields from all of the records ) Tj
1 0 0 1 102.0 392.0 Tm
0.0000 Tw
(    $x->deletemarc\(\{field=>'650'\}\); ) Tj
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
(        #delete the 110 field in record 2 ) Tj
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
(    $x->deletemarc\(\{record=>'2',field=>'110'\}\); ) Tj
1 0 0 1 102.0 332.0 Tm
0.0000 Tw
(        #delete all of the subfield h's in the 245 fields ) Tj
1 0 0 1 102.0 320.0 Tm
0.0000 Tw
(    $x->deletemarc\(\{field=>'245',subfield=>'h'\}\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 302.0 Tm
0.0000 Tw
(updatefirst\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 290.0 Tm
1.5175 Tw
(updatefirst\(\) takes a template, and an array from $marc-) Tj
/F00 10 Tf
1.5175 Tw
([recnum]\{array\}. It replaces/creates the field) Tj
1 0 0 1 102.0 278.0 Tm
0.7910 Tw
(data for a first match, using the template and the array, and leaves the rest alone. If the template has a) Tj
1 0 0 1 102.0 266.0 Tm
2.8721 Tw
(subfield element, \(this includes indicators\) it ignores all other information in the array and only) Tj
1 0 0 1 102.0 254.0 Tm
3.4693 Tw
(updates/creates based on the subfield information in the array. If the template has no subfield) Tj
1 0 0 1 102.0 242.0 Tm
0.2929 Tw
(information then indicators are left untouched unless a new field needs to be created, in which case they) Tj
1 0 0 1 102.0 230.0 Tm
0.0000 Tw
(are left blank. ) Tj
/F00 10 Tf
1 0 0 1 102.0 218.0 Tm
1.0780 Tw
(MARC::Rec::updatefirst\($template\) is identical to deletefirst, but ignores any record number specified) Tj
1 0 0 1 102.0 206.0 Tm
0.0000 Tw
(by $template. ) Tj
/F00 10 Tf
1 0 0 1 102.0 194.0 Tm
0.0300 Tw
(Most use of updatefirst\(\) is expected to be from Tie::MARC. It does not currently provide a useful return) Tj
1 0 0 1 102.0 182.0 Tm
0.0000 Tw
(value. ) Tj
/F21 10 Tf
1 0 0 1 72.0 164.0 Tm
0.0000 Tw
(updatefields\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 152.0 Tm
0.7329 Tw
(updatefields\(\) takes a template which specifies recnum, a $do_rebuild_map and a field \(needs the field) Tj
1 0 0 1 102.0 140.0 Tm
1.2274 Tw
(in case $rafields-) Tj
/F00 10 Tf
1.2274 Tw
([0] is empty\). It also takes a ref to an array of fieldrefs formatted like the output of) Tj
1 0 0 1 102.0 128.0 Tm
0.8662 Tw
(getfields\(\), and replaces/creates the field data. It assumes that it should replace the fields with the first) Tj
1 0 0 1 102.0 116.0 Tm
0.0000 Tw
(tag in the fieldrefs. It calls rebuild_map\(\) if $do_rebuild_map. ) Tj
/F10 10 Tf
1 0 0 1 102.0 104.0 Tm
0.0000 Tw
(    #Let's kill the *last* 500 field. ) Tj
1 0 0 1 102.0 92.0 Tm
0.0000 Tw
(    my $loc500 = \{record=>1,field=>500,rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 80.0 Tm
0.0000 Tw
(    my @rfields = $x->getfields\($loc500\); ) Tj
1 0 0 1 102.0 68.0 Tm
0.0000 Tw
(    pop @rfields; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(10) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
55 0 obj
5510
endobj
56 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F02 8 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
57 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 56 0 R
/Contents 54 0 R
>>
endobj
58 0 obj
<<
/Length 59 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(    $x->updatefields\($loc500,\\@rfields\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 740.0 Tm
0.0000 Tw
(getmatch\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 728.0 Tm
0.2119 Tw
(getmatch\(\) takes a subfield code \(can be an indicator\) and a fieldref. Returns 0 or a ref to the value to be) Tj
1 0 0 1 102.0 716.0 Tm
0.0000 Tw
(updated. ) Tj
/F10 10 Tf
1 0 0 1 102.0 704.0 Tm
0.0000 Tw
(    #Let's update the value of i2 for the *last* 500 ) Tj
1 0 0 1 102.0 692.0 Tm
0.0000 Tw
(    my $loc500 = \{record=>1,field=>500,rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 680.0 Tm
0.0000 Tw
(    my @rfields = $x->getfields\($loc500\); ) Tj
1 0 0 1 102.0 668.0 Tm
0.0000 Tw
(    my $rvictim = pop @rfields; ) Tj
1 0 0 1 102.0 656.0 Tm
0.0000 Tw
(    my $rval = getmatch\('i2',$rvictim\); ) Tj
1 0 0 1 102.0 644.0 Tm
0.0000 Tw
(    $$rval = "4" if $rval; ) Tj
/F00 10 Tf
1 0 0 1 102.0 620.0 Tm
0.0000 Tw
(MARC::Rec::getmatch\($subf,$rfield\) is identical to getmatch. ) Tj
/F21 10 Tf
1 0 0 1 72.0 602.0 Tm
0.0000 Tw
(insertpos\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 590.0 Tm
0.9153 Tw
(insertpos\(\) takes a subfield code \(can not be an indicator\), a value, and a fieldref. Updates the fieldref) Tj
1 0 0 1 102.0 578.0 Tm
0.0000 Tw
(with the first place that the fieldref can match. Assumes there is no exact subfield match in $fieldref. ) Tj
/F10 10 Tf
1 0 0 1 102.0 566.0 Tm
0.0000 Tw
(    #Let's update the value of subfield 'a' for the *last* 500 ) Tj
1 0 0 1 102.0 554.0 Tm
0.0000 Tw
(    my $value = "new info"; ) Tj
1 0 0 1 102.0 542.0 Tm
0.0000 Tw
(    my $loc500 = \{record=>1,field=>500,rebuild_map=>1\}; ) Tj
1 0 0 1 102.0 530.0 Tm
0.0000 Tw
(    my @rfields = $x->getfields\($loc500\); ) Tj
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(    my $rvictim = pop @rfields; ) Tj
1 0 0 1 102.0 506.0 Tm
0.0000 Tw
(    my $rval = getmatch\('a',$rvictim\); ) Tj
1 0 0 1 102.0 494.0 Tm
0.0000 Tw
(    if \($rval\) \{ ) Tj
1 0 0 1 102.0 482.0 Tm
0.0000 Tw
(        $$rval = $value ; ) Tj
1 0 0 1 102.0 470.0 Tm
0.0000 Tw
(    \} else \{ ) Tj
1 0 0 1 150.0 458.0 Tm
0.0000 Tw
($x->insertpos\('a',$value,$rvictim\); ) Tj
1 0 0 1 102.0 446.0 Tm
0.0000 Tw
(    \} ) Tj
/F00 10 Tf
1 0 0 1 102.0 422.0 Tm
0.0000 Tw
(MARC::Rec::insertpos\($subf,$value,$rfield\) is identical to insertpos; ) Tj
/F21 10 Tf
1 0 0 1 72.0 404.0 Tm
0.0000 Tw
(selectmarc\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 392.0 Tm
0.5206 Tw
(This method will select specific records from a MARC object and delete the rest. You can specify both) Tj
1 0 0 1 102.0 380.0 Tm
0.7780 Tw
(individual records and ranges of records in the same way as deletemarc\(\). selectmarc\(\) will also return) Tj
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
(the number of records deleted.  ) Tj
/F10 10 Tf
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
(    $x->selectmarc\(['3']\); ) Tj
1 0 0 1 102.0 344.0 Tm
0.0000 Tw
(    $y=$x->selectmarc\(['4','21-50','60']\); ) Tj
1 0 0 1 102.0 332.0 Tm
0.0000 Tw
(    print "$y records selected!"; ) Tj
/F21 10 Tf
1 0 0 1 72.0 314.0 Tm
0.0000 Tw
(searchmarc\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 302.0 Tm
0.5706 Tw
(This method will allow you to search through a MARC object, and retrieve record numbers for records) Tj
1 0 0 1 102.0 290.0 Tm
1.3235 Tw
(that matched your criteria. You can search for: 1\) records that contain a particular field, or field and) Tj
1 0 0 1 102.0 278.0 Tm
0.9861 Tw
(subfield ; 2\) records that have fields or subfields that match a regular expression ; 3\) and records that) Tj
1 0 0 1 102.0 266.0 Tm
0.4235 Tw
(have fields or subfields that ) Tj
/F01 10 Tf
0.4235 Tw
(do not) Tj
/F00 10 Tf
0.4235 Tw
( match a regular expression. The record numbers are returned to you) Tj
1 0 0 1 102.0 254.0 Tm
0.0000 Tw
(in an array which you can then use with deletemarc\(\), selectmarc\(\) and output\(\) if you want. ) Tj
/F20 10 Tf
1 0 0 1 102.0 227.6 Tm
0.0000 Tw
() Tj
ET
q
102 228.6 4 4 re
f
Q
BT
1 0 0 1 110 227.6 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 227.6 Tm
0.0000 Tw
(1\) Field/Subfield Presence: ) Tj
/F10 10 Tf
1 0 0 1 126.0 215.6 Tm
0.0000 Tw
(    @records=$x->searchmarc\(\{field=>"245"\}\); ) Tj
1 0 0 1 126.0 203.6 Tm
0.0000 Tw
(    @records=$x->searchmarc\(\{field=>"245",subfield=>"a"\}\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 183.2 Tm
0.0000 Tw
() Tj
ET
q
102 184.2 4 4 re
f
Q
BT
1 0 0 1 110 183.2 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 183.2 Tm
0.0000 Tw
(2\) Field/Subfield Match: ) Tj
/F10 10 Tf
1 0 0 1 126.0 171.2 Tm
0.0000 Tw
(    @records=$x->searchmarc\(\{field=>"245", ) Tj
1 0 0 1 270.0 159.2 Tm
0.0000 Tw
(     regex=>"/huckleberry/i"\}\); ) Tj
1 0 0 1 126.0 147.2 Tm
0.0000 Tw
(    @records=$x->searchmarc\(\{field=>"260",subfield=>"c", ) Tj
1 0 0 1 270.0 135.2 Tm
0.0000 Tw
(     regex=>"/19../"\}\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 114.8 Tm
0.0000 Tw
() Tj
ET
q
102 115.8 4 4 re
f
Q
BT
1 0 0 1 110 114.8 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 114.8 Tm
0.0000 Tw
(3\) Field/Subfield NotMatch: ) Tj
/F10 10 Tf
1 0 0 1 126.0 102.8 Tm
0.0000 Tw
(    @records=$x->searchmarc\(\{field=>"245", ) Tj
1 0 0 1 270.0 90.8 Tm
0.0000 Tw
(     notregex=>"/huckleberry/i"\}\); ) Tj
1 0 0 1 126.0 78.8 Tm
0.0000 Tw
(    @records=$x->searchmarc\(\{field=>"260", ) Tj
1 0 0 1 270.0 66.8 Tm
0.0000 Tw
(     subfield=>"c",notregex=>"/19../"\}\); ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 511.88 37 Tm
(11) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
59 0 obj
5503
endobj
60 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F01 7 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
61 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 60 0 R
/Contents 58 0 R
>>
endobj
62 0 obj
<<
/Length 63 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F21 10 Tf
1 0 0 1 72.0 770.0 Tm
0.0000 Tw
(createrecord\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 758.0 Tm
0.7982 Tw
(You can use this method to initialize a new record. It only takes one optional parameter, ) Tj
/F02 10 Tf
0.7982 Tw
(leader) Tj
/F00 10 Tf
0.7982 Tw
( which) Tj
1 0 0 1 102.0 746.0 Tm
1.2922 Tw
(sets the 24 characters in the record leader: see http://lcweb.loc.gov/marc/bibliographic/ecbdhome.html) Tj
1 0 0 1 102.0 734.0 Tm
0.9083 Tw
(for more details on the leader. Note: you do not need to pass character positions 00-04 or 12-16 since) Tj
1 0 0 1 102.0 722.0 Tm
0.1506 Tw
(these are calculated by MARC.pm if outputting to MARC you can assign 0 to each position. If no leader) Tj
1 0 0 1 102.0 710.0 Tm
0.1656 Tw
(is passed a default USMARC leader will be created of "00000nam  2200000 a 4500". createrecord\(\) will) Tj
1 0 0 1 102.0 698.0 Tm
0.6017 Tw
(return the record number for the record that was created, which you will need to use later when adding) Tj
1 0 0 1 102.0 686.0 Tm
4.0169 Tw
(fields with addfield\(\). Createrecord now makes the new record an instance of an appropriate) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(MARC::Rec subclass.  ) Tj
/F10 10 Tf
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(    use MARC; ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(    my $x = new MARC; ) Tj
1 0 0 1 102.0 638.0 Tm
0.0000 Tw
(    $record_number = $x->createrecord\(\); ) Tj
1 0 0 1 102.0 626.0 Tm
0.0000 Tw
(    $record_number = $x->createrecord\(\{leader=> ) Tj
1 0 0 1 246.0 614.0 Tm
0.0000 Tw
(    ) Tj
1 0 0 1 294.0 614.0 Tm
0.0000 Tw
(       "00000nmm  2200000 a 4500"\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 590.0 Tm
0.0000 Tw
(MARC::Rec::createrecord\($leader\) returns an instance of a suitable subclass of MARC::Rec. ) Tj
/F21 10 Tf
1 0 0 1 72.0 572.0 Tm
0.0000 Tw
(getupdate\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 560.0 Tm
1.3547 Tw
(The ) Tj
/F01 10 Tf
1.3547 Tw
(getupdate\(\)) Tj
/F00 10 Tf
1.3547 Tw
( method returns an array that contains the contents of a field in a defined order that) Tj
1 0 0 1 102.0 548.0 Tm
2.5146 Tw
(permits restoring the field after deleting it. This permits changing only individual subfields while) Tj
1 0 0 1 102.0 536.0 Tm
1.8788 Tw
(keeping other data intact. If a field is repeated in the record, the resulting array separates the field) Tj
1 0 0 1 102.0 524.0 Tm
0.0094 Tw
(information with an element containing "\\036" - the internal field separator which can never occur in real) Tj
1 0 0 1 102.0 512.0 Tm
2.2823 Tw
(MARC data parameters. A non-existing field returns ) Tj
/F10 10 Tf
2.2823 Tw
(undef) Tj
/F00 10 Tf
2.2823 Tw
(. An example will make the structure) Tj
1 0 0 1 102.0 500.0 Tm
0.0000 Tw
(clearer. The next two MARC fields \(shown in ASCII\) will be described in the following array: ) Tj
/F10 10 Tf
1 0 0 1 198.0 488.0 Tm
0.0000 Tw
(246  30  $aPhoto archive ) Tj
1 0 0 1 198.0 476.0 Tm
0.0000 Tw
(246  3   $aAssociated Press photo archive ) Tj
1 0 0 1 102.0 452.0 Tm
0.0000 Tw
(    my $update246 = \{field=>'246',record=>2,ordered=>'y'\}; ) Tj
1 0 0 1 150.0 440.0 Tm
0.0000 Tw
(# next two statements are equivalent ) Tj
1 0 0 1 102.0 428.0 Tm
0.0000 Tw
(    my @u246 = $x->getupdate\($update246\); ) Tj
1 0 0 1 150.0 416.0 Tm
0.0000 Tw
(# or ) Tj
1 0 0 1 102.0 404.0 Tm
0.0000 Tw
(    my @u246 = \('i1','3','i2','0', ) Tj
1 0 0 1 198.0 392.0 Tm
0.0000 Tw
('a','Photo archive',"\\036", ) Tj
1 0 0 1 102.0 380.0 Tm
0.0000 Tw
(                'i1','3','i2',' ', ) Tj
1 0 0 1 198.0 368.0 Tm
0.0000 Tw
('a','Associated Press photo archive',"\\036"\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 344.0 Tm
0.0144 Tw
(After making any desired modifications to the data, the existing field can be replaced using the following) Tj
1 0 0 1 102.0 332.0 Tm
0.0000 Tw
(sequence \(for non-repeating fields\): ) Tj
/F10 10 Tf
1 0 0 1 102.0 320.0 Tm
0.0000 Tw
(    $x->deletemarc\($update246\)\); ) Tj
1 0 0 1 102.0 308.0 Tm
0.0000 Tw
(    my @records = \(\); ) Tj
1 0 0 1 102.0 296.0 Tm
0.0000 Tw
(    foreach my $y1 \(@u246\) \{ ) Tj
1 0 0 1 102.0 284.0 Tm
0.0000 Tw
(        last if \($y1 eq "\\036"\); ) Tj
1 0 0 1 102.0 272.0 Tm
0.0000 Tw
(    ) Tj
1 0 0 1 150.0 272.0 Tm
0.0000 Tw
(push @records, $y1; ) Tj
1 0 0 1 102.0 260.0 Tm
0.0000 Tw
(    \} ) Tj
1 0 0 1 102.0 248.0 Tm
0.0000 Tw
(    $x->addfield\($update246, @records\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 230.0 Tm
0.0000 Tw
(updaterecord\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 218.0 Tm
0.9921 Tw
(The updaterecord\(\) method is a more complete version of the preceding sequence with error checking) Tj
1 0 0 1 102.0 206.0 Tm
0.0481 Tw
(and the ability to split the update array into multiple addfield\(\) commands when given repeating fields. It) Tj
1 0 0 1 102.0 194.0 Tm
0.5000 Tw
(takes an array of key/value pairs, formatted like the output of getupdate\(\), and replaces/creates the field) Tj
1 0 0 1 102.0 182.0 Tm
0.9975 Tw
(data. For repeated tags, a "\\036" element is used to delimit data into separate addfield\(\) commands. It) Tj
1 0 0 1 102.0 170.0 Tm
0.0000 Tw
(returns the number of successful addfield\(\) commands or ) Tj
/F10 10 Tf
0.0000 Tw
(undef) Tj
/F00 10 Tf
0.0000 Tw
( on failure. ) Tj
/F10 10 Tf
1 0 0 1 102.0 158.0 Tm
0.0000 Tw
(    $repeats = $x->updaterecord\($update246, @u246\);) Tj
1 0 0 1 438.0 158.0 Tm
0.0000 Tw
(# same as above ) Tj
/F21 10 Tf
1 0 0 1 72.0 140.0 Tm
0.0000 Tw
(addfield\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 128.0 Tm
0.8947 Tw
(This method will allow you to addfields to a specified record. The syntax may look confusing at first,) Tj
1 0 0 1 102.0 116.0 Tm
0.5800 Tw
(but once you understand it you will be able to add fields to records that you have read in, or to records) Tj
1 0 0 1 102.0 104.0 Tm
1.3254 Tw
(that you have created with createrecord\(\). addfield\(\) takes six parameters: ) Tj
/F02 10 Tf
1.3254 Tw
(record) Tj
/F00 10 Tf
1.3254 Tw
( which indicates the) Tj
1 0 0 1 102.0 92.0 Tm
0.7579 Tw
(record number to add the field to, ) Tj
/F02 10 Tf
0.7579 Tw
(field) Tj
/F00 10 Tf
0.7579 Tw
( which indicates the field you wish to create \(ie. 245\), ) Tj
/F02 10 Tf
0.7579 Tw
(i1) Tj
/F00 10 Tf
0.7579 Tw
( which) Tj
1 0 0 1 102.0 80.0 Tm
1.3187 Tw
(holds one character for the first indicator, ) Tj
/F02 10 Tf
1.3187 Tw
(i2) Tj
/F00 10 Tf
1.3187 Tw
( which holds one character for the second indicator, and) Tj
1 0 0 1 102.0 68.0 Tm
0.3817 Tw
() Tj
/F02 10 Tf
0.3817 Tw
(value) Tj
/F00 10 Tf
0.3817 Tw
( which holds the subfield data that you wish to add to the field. addfield\(\) will automatically try to) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(12) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
63 0 obj
6688
endobj
64 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F01 7 0 R
/F02 8 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
65 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 64 0 R
/Contents 62 0 R
>>
endobj
66 0 obj
<<
/Length 67 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F00 10 Tf
1 0 0 1 102.0 770.0 Tm
0.1255 Tw
(insert your new field in tag order \(ie. a 500 field before a 520 field\), however you can turn this off if you) Tj
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(set ) Tj
/F02 10 Tf
0.0000 Tw
(ordered) Tj
/F00 10 Tf
0.0000 Tw
( to "no" which will add the field to the end. Here are some examples: ) Tj
/F10 10 Tf
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(    $y = $x->createrecord\(\); # $y will store the record number created ) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(    $x->addfield\(\{record=>"$y", field=>"100", i1=>"1", i2=>"0", ) Tj
1 0 0 1 198.0 710.0 Tm
0.0000 Tw
(  value=> [a=>"Twain, Mark, ", d=>"1835-1910."]\}\); ) Tj
1 0 0 1 102.0 686.0 Tm
0.0000 Tw
(    $x->addfield\(\{record=>"$y", field=>"245", ) Tj
1 0 0 1 198.0 674.0 Tm
0.0000 Tw
(  i1=>"1", i2=>"4", value=> ) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(                 [a=>"The adventures of Huckleberry Finn /", ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(                  c=>"Mark Twain ; illustrated by E.W. Kemble."]\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 626.0 Tm
0.9556 Tw
(This example initialized a new record, and added a 100 field and a 245 field. For some more creative) Tj
1 0 0 1 102.0 614.0 Tm
0.1713 Tw
(uses of the addfield\(\) function take a look at the ) Tj
/F02 10 Tf
0.1713 Tw
(EXAMPLES) Tj
/F00 10 Tf
0.1713 Tw
( section. The ) Tj
/F02 10 Tf
0.1713 Tw
(value) Tj
/F00 10 Tf
0.1713 Tw
( parameters, including ) Tj
/F02 10 Tf
0.1713 Tw
(i1) Tj
/F00 10 Tf
1 0 0 1 102.0 602.0 Tm
0.2776 Tw
(and ) Tj
/F02 10 Tf
0.2776 Tw
(i2) Tj
/F00 10 Tf
0.2776 Tw
(, can be specified using a separate array. This permits restoring field\(s\) from the array returned by) Tj
1 0 0 1 102.0 590.0 Tm
0.6171 Tw
(the ) Tj
/F01 10 Tf
0.6171 Tw
(getupdate\(\)) Tj
/F00 10 Tf
0.6171 Tw
( method - either as-is or with modifications. The ) Tj
/F02 10 Tf
0.6171 Tw
(i1) Tj
/F00 10 Tf
0.6171 Tw
( and ) Tj
/F02 10 Tf
0.6171 Tw
(i2) Tj
/F00 10 Tf
0.6171 Tw
( key/value pairs must be first) Tj
1 0 0 1 102.0 578.0 Tm
0.0000 Tw
(and in that order if included. ) Tj
/F10 10 Tf
1 0 0 1 150.0 566.0 Tm
0.0000 Tw
(# same as "100" example above ) Tj
1 0 0 1 102.0 554.0 Tm
0.0000 Tw
(    my @v100 = 'i1','1','i2',"0",'a',"Twain, Mark, ", ) Tj
1 0 0 1 150.0 542.0 Tm
0.0000 Tw
(       'd',"1835-1910."; ) Tj
1 0 0 1 102.0 530.0 Tm
0.0000 Tw
(    $x->addfield\(\{record=>"$y", field=>"100"\}, @v100\); ) Tj
/F21 10 Tf
1 0 0 1 72.0 512.0 Tm
0.0000 Tw
(add_005s\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 500.0 Tm
1.3479 Tw
(Add_005s takes a specification of records \(defaults to everything\) and  updates the indicated records) Tj
1 0 0 1 102.0 488.0 Tm
0.0000 Tw
(with updated 005 fields \(date of last transaction\). ) Tj
/F21 10 Tf
1 0 0 1 72.0 470.0 Tm
0.0000 Tw
(output\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 458.0 Tm
0.3673 Tw
(Output is a multi-functional method for creating formatted output from a MARC object. There are three) Tj
1 0 0 1 102.0 446.0 Tm
0.3972 Tw
(parameters ) Tj
/F02 10 Tf
0.3972 Tw
(file) Tj
/F00 10 Tf
0.3972 Tw
(, ) Tj
/F02 10 Tf
0.3972 Tw
(format) Tj
/F00 10 Tf
0.3972 Tw
(, ) Tj
/F02 10 Tf
0.3972 Tw
(records) Tj
/F00 10 Tf
0.3972 Tw
(. If ) Tj
/F02 10 Tf
0.3972 Tw
(file) Tj
/F00 10 Tf
0.3972 Tw
( is specified the output will be directed to that file. It is important) Tj
1 0 0 1 102.0 434.0 Tm
0.2259 Tw
(to specify with ) Tj
/F00 10 Tf
0.2259 Tw
( and ) Tj
/F00 10 Tf
0.2259 Tw
() Tj
/F00 10 Tf
0.2259 Tw
( whether you want to create or append the file! If no ) Tj
/F02 10 Tf
0.2259 Tw
(file) Tj
/F00 10 Tf
0.2259 Tw
( is specified then the results) Tj
1 0 0 1 102.0 422.0 Tm
0.0000 Tw
(of the output will be returned to a variable \(both variations are listed below\).  ) Tj
/F00 10 Tf
1 0 0 1 102.0 410.0 Tm
1.2193 Tw
(The MARC standard includes a control field \(005\) that records the date of last automatic processing.) Tj
1 0 0 1 102.0 398.0 Tm
0.1879 Tw
(This is implemented as a side-effect of output\(\) to a file or if explicitly requested via a add_005s field of) Tj
1 0 0 1 102.0 386.0 Tm
0.0000 Tw
(the template. The current time is stamped on the records indicated by the template. ) Tj
/F00 10 Tf
1 0 0 1 102.0 374.0 Tm
2.1962 Tw
(Valid ) Tj
/F02 10 Tf
2.1962 Tw
(format) Tj
/F00 10 Tf
2.1962 Tw
( values currently include usmarc, marcmaker, ascii, html, urls, and isbd. The optional) Tj
1 0 0 1 102.0 362.0 Tm
0.7488 Tw
() Tj
/F02 10 Tf
0.7488 Tw
(records) Tj
/F00 10 Tf
0.7488 Tw
( parameter allows you to pass an array of record numbers which you wish to output. You must) Tj
1 0 0 1 102.0 350.0 Tm
0.2924 Tw
(pass the array as a reference, hence the forward-slash in \\@records below. If you do not include ) Tj
/F02 10 Tf
0.2924 Tw
(records) Tj
/F00 10 Tf
1 0 0 1 102.0 338.0 Tm
0.0000 Tw
(the output will default to all the records in the object.  ) Tj
/F00 10 Tf
1 0 0 1 102.0 326.0 Tm
3.1100 Tw
(The ) Tj
/F02 10 Tf
3.1100 Tw
(lineterm) Tj
/F00 10 Tf
3.1100 Tw
( parameter can be used to override the line-ending default for any of the formats.) Tj
1 0 0 1 102.0 314.0 Tm
0.3307 Tw
() Tj
/F02 10 Tf
0.3307 Tw
(MARCMaker) Tj
/F00 10 Tf
0.3307 Tw
( defaults to CRLF \(the format was originally released for MS-DOS\). The others use `\\n' as) Tj
1 0 0 1 102.0 302.0 Tm
0.0000 Tw
(the default. ) Tj
/F00 10 Tf
1 0 0 1 102.0 290.0 Tm
0.3793 Tw
(With the ) Tj
/F02 10 Tf
0.3793 Tw
(MARCMaker) Tj
/F00 10 Tf
0.3793 Tw
( format, a ) Tj
/F02 10 Tf
0.3793 Tw
(charset) Tj
/F00 10 Tf
0.3793 Tw
( parameter accepts a hash-reference to a user supplied character) Tj
1 0 0 1 102.0 278.0 Tm
0.0650 Tw
(translation table. The "ustext.txt" table supplied with the LoC. MARCBreaker utility is used internally as) Tj
1 0 0 1 102.0 266.0 Tm
1.3094 Tw
(the default. You can use the ) Tj
/F01 10 Tf
1.3094 Tw
(ustext_default) Tj
/F00 10 Tf
1.3094 Tw
( method to get a hash-reference to it if you only want to) Tj
1 0 0 1 102.0 254.0 Tm
0.0000 Tw
(modify a couple of characters. See example below. ) Tj
/F00 10 Tf
1 0 0 1 102.0 242.0 Tm
1.6987 Tw
(The ) Tj
/F02 10 Tf
1.6987 Tw
(MARCMaker) Tj
/F00 10 Tf
1.6987 Tw
( Specification requires that long lines be split to less than 80 columns. While that) Tj
1 0 0 1 102.0 230.0 Tm
0.6050 Tw
(behavior is the default, the ) Tj
/F02 10 Tf
0.6050 Tw
(nolinebreak) Tj
/F00 10 Tf
0.6050 Tw
( parameter can override it and the resulting output will be much) Tj
1 0 0 1 102.0 218.0 Tm
0.0000 Tw
(like the ) Tj
/F02 10 Tf
0.0000 Tw
(ascii) Tj
/F00 10 Tf
0.0000 Tw
( format. ) Tj
/F00 10 Tf
1 0 0 1 102.0 206.0 Tm
1.7075 Tw
(MARC::Rec::output\($template\) is the same as output except that ignores record number\(s\) and only) Tj
1 0 0 1 102.0 194.0 Tm
0.0000 Tw
(outputs its caller. \(E.g., with $format eq `urls' it does not output html header and footer information.\) ) Tj
/F20 10 Tf
1 0 0 1 102.0 167.6 Tm
0.0000 Tw
() Tj
ET
q
102 168.6 4 4 re
f
Q
BT
1 0 0 1 110 167.6 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 167.6 Tm
0.0000 Tw
(MARC ) Tj
/F10 10 Tf
1 0 0 1 126.0 155.6 Tm
0.0000 Tw
(    $x->output\(\{file=>">mymarc.dat",'format'=>"usmarc"\}\); ) Tj
1 0 0 1 126.0 143.6 Tm
0.0000 Tw
(    $x->output\(\{file=>">mymarc.dat",'format'=>"usmarc", ) Tj
1 0 0 1 222.0 131.6 Tm
0.0000 Tw
(records=>\\@records\}\); ) Tj
1 0 0 1 126.0 119.6 Tm
0.0000 Tw
(    $y=$x->output\(\{'format'=>"usmarc"\}\); #put the output into $y ) Tj
/F20 10 Tf
1 0 0 1 102.0 99.2 Tm
0.0000 Tw
() Tj
ET
q
102 100.2 4 4 re
f
Q
BT
1 0 0 1 110 99.2 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 99.2 Tm
0.0000 Tw
(MARCMaker ) Tj
/F10 10 Tf
1 0 0 1 126.0 87.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">mymarcmaker.mkr",'format'=>"marcmaker"\}\); ) Tj
1 0 0 1 126.0 75.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">mymarcmaker.mkr",'format'=>"marcmaker", ) Tj
1 0 0 1 222.0 63.2 Tm
0.0000 Tw
(records=>\\@records\}\); ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 511.88 37 Tm
(13) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
67 0 obj
7970
endobj
68 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F01 7 0 R
/F02 8 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
69 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 68 0 R
/Contents 66 0 R
>>
endobj
70 0 obj
<<
/Length 71 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 126.0 758.0 Tm
0.0000 Tw
(    $y=$x->output\(\{'format'=>"marcmaker"\}\); #put the output into $y ) Tj
1 0 0 1 126.0 734.0 Tm
0.0000 Tw
(    $x->output\(\{file=>"brkrtest.mkr",'format'=>"marcmaker", ) Tj
1 0 0 1 222.0 722.0 Tm
0.0000 Tw
(nolinebreak=>"1", lineterm=>"\\n", ) Tj
1 0 0 1 222.0 710.0 Tm
0.0000 Tw
(charset=>\\%char_hash\}\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 689.6 Tm
0.0000 Tw
() Tj
ET
q
102 690.6 4 4 re
f
Q
BT
1 0 0 1 110 689.6 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 689.6 Tm
0.0000 Tw
(ASCII ) Tj
/F10 10 Tf
1 0 0 1 126.0 677.6 Tm
0.0000 Tw
(    $x->output\(\{file=>">myascii.txt",'format'=>"ascii"\}\); ) Tj
1 0 0 1 126.0 665.6 Tm
0.0000 Tw
(    $x->output\(\{file=>">myascii.txt",'format'=>"ascii", ) Tj
1 0 0 1 222.0 653.6 Tm
0.0000 Tw
(records=>\\@records\}\); ) Tj
1 0 0 1 126.0 641.6 Tm
0.0000 Tw
(    $y=$x->output\(\{'format'=>"ascii"\}\); #put the output into $y ) Tj
/F20 10 Tf
1 0 0 1 102.0 621.2 Tm
0.0000 Tw
() Tj
ET
q
102 622.2 4 4 re
f
Q
BT
1 0 0 1 110 621.2 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 621.2 Tm
0.0000 Tw
(HTML ) Tj
/F00 10 Tf
1 0 0 1 126.0 609.2 Tm
0.5907 Tw
(The HTML output method has some additional parameters. ) Tj
/F02 10 Tf
0.5907 Tw
(fields) Tj
/F00 10 Tf
0.5907 Tw
( which if set to "all" will output) Tj
1 0 0 1 126.0 597.2 Tm
0.3209 Tw
(all of the fields. Or you can pass the tag number and a label that you want to use for that tag. This) Tj
1 0 0 1 126.0 585.2 Tm
0.4061 Tw
(will result in HTML output that only contains the specified tags, and will use the label in place of) Tj
1 0 0 1 126.0 573.2 Tm
0.0000 Tw
(the MARC code. ) Tj
/F10 10 Tf
1 0 0 1 126.0 561.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">myhtml.html",'format'=>"html", ) Tj
1 0 0 1 222.0 549.2 Tm
0.0000 Tw
(fields=>"all"\}\); ) Tj
1 0 0 1 126.0 525.2 Tm
0.0000 Tw
(        #this will only output the 100 and 245 fields, with the  ) Tj
1 0 0 1 174.0 513.2 Tm
0.0000 Tw
(#labels "Title: " and "Author: " ) Tj
1 0 0 1 126.0 501.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">myhtml.html",'format'=>"html", ) Tj
1 0 0 1 126.0 489.2 Tm
0.0000 Tw
(                245=>"Title: ",100=>"Author: "\}\);     ) Tj
1 0 0 1 126.0 465.2 Tm
0.0000 Tw
(    $y=$x->output\(\{'format'=>"html"\}\); ) Tj
/F00 10 Tf
1 0 0 1 126.0 441.2 Tm
0.5928 Tw
(If you want to build the HTML file in stages, there are four other ) Tj
/F02 10 Tf
0.5928 Tw
(format) Tj
/F00 10 Tf
0.5928 Tw
( values available to you:) Tj
1 0 0 1 126.0 429.2 Tm
1.3064 Tw
(1\) "html_header", 2\) "html_start", 3\) "html_body", and 4\) "html_footer". Be careful to use the ) Tj
/F00 10 Tf
1.3064 Tw
() Tj
/F00 10 Tf
1 0 0 1 126.0 417.2 Tm
0.0000 Tw
(append when adding to a file though! ) Tj
/F10 10 Tf
1 0 0 1 126.0 405.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">myhtml.html", ) Tj
1 0 0 1 222.0 393.2 Tm
0.0000 Tw
('format'=>"html_header"\}\); # Content-type ) Tj
1 0 0 1 126.0 381.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">>myhtml.html", ) Tj
1 0 0 1 222.0 369.2 Tm
0.0000 Tw
('format'=>"html_start"\}\);  # <BODY> ) Tj
1 0 0 1 126.0 357.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">>myhtml.html", ) Tj
1 0 0 1 222.0 345.2 Tm
0.0000 Tw
('format'=>"html_body",fields=>"all"\}\); ) Tj
1 0 0 1 126.0 333.2 Tm
0.0000 Tw
(    $x->output\(\{file=>">>myhtml.html", ) Tj
1 0 0 1 222.0 321.2 Tm
0.0000 Tw
('format'=>"html_footer"\}\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 300.8 Tm
0.0000 Tw
() Tj
ET
q
102 301.8 4 4 re
f
Q
BT
1 0 0 1 110 300.8 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 300.8 Tm
0.0000 Tw
(URLS ) Tj
/F10 10 Tf
1 0 0 1 126.0 288.8 Tm
0.0000 Tw
(    $x->output\(\{file=>"urls.html",'format'=>"urls"\}\); ) Tj
1 0 0 1 126.0 276.8 Tm
0.0000 Tw
(    $y=$x->output\(\{'format'=>"urls"\}\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 256.4 Tm
0.0000 Tw
() Tj
ET
q
102 257.4 4 4 re
f
Q
BT
1 0 0 1 110 256.4 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 256.4 Tm
0.0000 Tw
(ISBD ) Tj
/F00 10 Tf
1 0 0 1 126.0 244.4 Tm
0.0000 Tw
(An experimental output format that attempts to mimic the ISBD. ) Tj
/F10 10 Tf
1 0 0 1 126.0 232.4 Tm
0.0000 Tw
(    $x->output\(\{file=>"isbd.txt",'format'=>"isbd"\}\); ) Tj
1 0 0 1 126.0 220.4 Tm
0.0000 Tw
(    $y=$x->output\(\{'format'=>"isbd"\}\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 200.0 Tm
0.0000 Tw
() Tj
ET
q
102 201 4 4 re
f
Q
BT
1 0 0 1 110 200 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 200.0 Tm
0.0000 Tw
(XML ) Tj
/F00 10 Tf
1 0 0 1 126.0 188.0 Tm
2.1825 Tw
(Round-trip conversion between MARC and XML is handled by the subclass  MARC::XML.) Tj
1 0 0 1 126.0 176.0 Tm
0.0000 Tw
(MARC::XML is available for download from the CPAN. ) Tj
/F21 10 Tf
1 0 0 1 72.0 146.0 Tm
0.0000 Tw
(usmarc_default\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 134.0 Tm
0.0540 Tw
(This method returns a hash reference to a translation table between mnemonics delimited by curly braces) Tj
1 0 0 1 102.0 122.0 Tm
0.4908 Tw
(and single-byte character codes in the MARC record. Multi-byte characters are not currently supported.) Tj
1 0 0 1 102.0 110.0 Tm
0.3756 Tw
(The hash has keys of the form `\{esc\}' and values of the form chr\(0x1b\). It is used during MARCMaker) Tj
1 0 0 1 102.0 98.0 Tm
0.0000 Tw
(input. ) Tj
/F10 10 Tf
1 0 0 1 102.0 86.0 Tm
0.0000 Tw
(    my %inc = %\{$x->usmarc_default\(\)\}; ) Tj
1 0 0 1 102.0 74.0 Tm
0.0000 Tw
(    printf "dollar = %s\\n", $inc\{'dollar'\};) Tj
1 0 0 1 390.0 74.0 Tm
0.0000 Tw
(# prints '$' ) Tj
1 0 0 1 102.0 62.0 Tm
0.0000 Tw
(    $inc\{'yen'\} = 'Y'; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(14) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
71 0 obj
5677
endobj
72 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F02 8 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
73 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 72 0 R
/Contents 70 0 R
>>
endobj
74 0 obj
<<
/Length 75 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(    $x->openmarc\(\{file=>"makrbrkr.mrc",'format'=>"marcmaker", ) Tj
1 0 0 1 198.0 746.0 Tm
0.0000 Tw
(  charset=>\\%inc\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(MARC::Rec::usmarc_default is identical to usmarc_default; ) Tj
/F21 10 Tf
1 0 0 1 72.0 704.0 Tm
0.0000 Tw
(ustext_default\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 692.0 Tm
1.7857 Tw
(This method returns a hash reference to a translation table between single-byte character codes and) Tj
1 0 0 1 102.0 680.0 Tm
0.9592 Tw
(mnemonics delimited by curly braces. Multi-byte characters are not currently supported. The hash has) Tj
1 0 0 1 102.0 668.0 Tm
0.0000 Tw
(keys of the form chr\(0x1b\) and values of the form `\{esc\}'. It is used during MARCMaker output. ) Tj
/F10 10 Tf
1 0 0 1 102.0 656.0 Tm
0.0000 Tw
(    my %outc = %\{$x->ustext_default\(\)\}; ) Tj
1 0 0 1 102.0 644.0 Tm
0.0000 Tw
(    printf "dollar = %s\\n", $outc\{'$'\};) Tj
1 0 0 1 342.0 644.0 Tm
0.0000 Tw
(# prints '\{dollar\}' ) Tj
1 0 0 1 102.0 632.0 Tm
0.0000 Tw
(    $outc\{'$'\} = '\{uscash\}'; ) Tj
1 0 0 1 102.0 620.0 Tm
0.0000 Tw
(    printf "dollar = %s\\n", $outc\{'$'\};) Tj
1 0 0 1 342.0 620.0 Tm
0.0000 Tw
(# prints '\{uscash\}' ) Tj
1 0 0 1 102.0 608.0 Tm
0.0000 Tw
(    $y = $x->output\(\{'format'=>"marcmaker", charset=>\\%outc\}\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 584.0 Tm
0.0000 Tw
(MARC::Rec::ustext_default is identical to ustext_default; ) Tj
/F21 10 Tf
1 0 0 1 72.0 566.0 Tm
0.0000 Tw
(as_string\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 554.0 Tm
0.0000 Tw
(As_string\(\) takes no parameters and returns a \(Unix\) newline separated version of the record. ) Tj
/F10 10 Tf
1 0 0 1 102.0 542.0 Tm
0.0000 Tw
(  Format is: $tag<SPACE>$i1$i2<SPACE>$subfields ) Tj
1 0 0 1 102.0 530.0 Tm
0.0000 Tw
(  where $subfields are separated by "\\c_" binary subfield indicators. ) Tj
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(  Tag 000 is ldr. ) Tj
/F00 10 Tf
1 0 0 1 102.0 494.0 Tm
0.0000 Tw
(Subclasses may need to override this format. If so,  they should override from_string. ) Tj
/F21 10 Tf
1 0 0 1 72.0 476.0 Tm
0.0000 Tw
(from_string\(\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 464.0 Tm
0.6269 Tw
(From_string\(\) takes a string parameter and updates the calling record`s \{array\} information. It assumes) Tj
1 0 0 1 102.0 452.0 Tm
0.0000 Tw
(the string is formatted like the output of as_string\(\).  ) Tj
/F21 12 Tf
1 0 0 1 72.0 434.0 Tm
0.0000 Tw
(EXAMPLES ) Tj
/F00 10 Tf
1 0 0 1 102.0 419.6 Tm
0.0000 Tw
(Here are a few examples to fire your imagination. ) Tj
/F20 10 Tf
1 0 0 1 102.0 393.2 Tm
0.0000 Tw
() Tj
ET
q
102 394.2 4 4 re
f
Q
BT
1 0 0 1 110 393.2 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 393.2 Tm
1.2227 Tw
(This example will read in the complete contents of a MARC file called "mymarc.dat" and then) Tj
1 0 0 1 126.0 381.2 Tm
0.0000 Tw
(output it as a MARCMaker file called "mymkr.mkr". ) Tj
/F10 10 Tf
1 0 0 1 126.0 369.2 Tm
0.0000 Tw
(    #!/usr/bin/perl ) Tj
1 0 0 1 126.0 357.2 Tm
0.0000 Tw
(    use MARC; ) Tj
1 0 0 1 126.0 345.2 Tm
0.0000 Tw
(    $x = MARC->new\("mymarc.dat","marcmaker"\); ) Tj
1 0 0 1 126.0 333.2 Tm
0.0000 Tw
(    $x->output\(\{file=>"mymkr.mkr",'format'=>"marcmaker"\); ) Tj
/F20 10 Tf
1 0 0 1 102.0 312.8 Tm
0.0000 Tw
() Tj
ET
q
102 313.8 4 4 re
f
Q
BT
1 0 0 1 110 312.8 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 312.8 Tm
2.9887 Tw
(The MARC object occupies a fair number of working memory, and you may want to do) Tj
1 0 0 1 126.0 300.8 Tm
1.7313 Tw
(conversions on very large files. In this case you will want to use the openmarc\(\), nextmarc\(\),) Tj
1 0 0 1 126.0 288.8 Tm
0.9007 Tw
(deletemarc\(\), and closemarc\(\) methods to read in portions of the MARC file, do something with) Tj
1 0 0 1 126.0 276.8 Tm
0.3562 Tw
(the record\(s\), remove them from the object, and then read in the next record\(s\). This example will) Tj
1 0 0 1 126.0 264.8 Tm
1.0967 Tw
(read in one record at a time from a MARC file called "mymarc.dat" and convert it to a MARC) Tj
1 0 0 1 126.0 252.8 Tm
0.0000 Tw
(Maker file called "myfile.mkr". ) Tj
/F10 10 Tf
1 0 0 1 126.0 240.8 Tm
0.0000 Tw
(    #!/usr/bin/perl ) Tj
1 0 0 1 126.0 228.8 Tm
0.0000 Tw
(    use MARC; ) Tj
1 0 0 1 126.0 216.8 Tm
0.0000 Tw
(    $x = new MARC; ) Tj
1 0 0 1 126.0 204.8 Tm
0.0000 Tw
(    $x->openmarc\(\{file=>"mymarc.dat",'format'=>"usmarc"\}\); ) Tj
1 0 0 1 126.0 192.8 Tm
0.0000 Tw
(    while \($x->nextmarc\(1\)\) \{ ) Tj
1 0 0 1 174.0 180.8 Tm
0.0000 Tw
($x->output\(\{file=>">>myfile.mkr",'format'=>"marcmaker"\}\); ) Tj
1 0 0 1 174.0 168.8 Tm
0.0000 Tw
($x->deletemarc\(\); #empty the object for reading in another ) Tj
1 0 0 1 126.0 156.8 Tm
0.0000 Tw
(    \}         ) Tj
/F20 10 Tf
1 0 0 1 102.0 136.4 Tm
0.0000 Tw
() Tj
ET
q
102 137.4 4 4 re
f
Q
BT
1 0 0 1 110 136.4 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 136.4 Tm
0.2078 Tw
(Perhaps you have a tab delimited text file of data for online journals you have access to from Dow) Tj
1 0 0 1 126.0 124.4 Tm
0.1382 Tw
(Jones Interactive, and you would like to create a batch of MARC records to load into your catalog.) Tj
1 0 0 1 126.0 112.4 Tm
1.2963 Tw
(In this case you can use createrecord\(\), addfield\(\) and output\(\) to create records as you read in) Tj
1 0 0 1 126.0 100.4 Tm
0.0000 Tw
(your delimited file. When you are done, you then output to a file in USMARC. ) Tj
/F10 10 Tf
1 0 0 1 126.0 88.4 Tm
0.0000 Tw
(    #!/usr/bin/perl ) Tj
1 0 0 1 126.0 76.4 Tm
0.0000 Tw
(    use MARC; ) Tj
1 0 0 1 126.0 64.4 Tm
0.0000 Tw
(    $x = new MARC; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 511.88 37 Tm
(15) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
75 0 obj
5768
endobj
76 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
77 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 76 0 R
/Contents 74 0 R
>>
endobj
78 0 obj
<<
/Length 79 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 126.0 758.0 Tm
0.0000 Tw
(    open \(INPUT_FILE, "delimited_file"\); ) Tj
1 0 0 1 126.0 746.0 Tm
0.0000 Tw
(    while \($line=<INPUT_FILE>\) \{ ) Tj
1 0 0 1 126.0 734.0 Tm
0.0000 Tw
(        \($journaltitle,$issn\) = split /\\t/,$line; ) Tj
1 0 0 1 126.0 722.0 Tm
0.0000 Tw
(        $num=$x->createrecord\(\); ) Tj
1 0 0 1 126.0 710.0 Tm
0.0000 Tw
(        $x->addfield\(\{record=>$num,  ) Tj
1 0 0 1 126.0 698.0 Tm
0.0000 Tw
(                      field=>"022",  ) Tj
1 0 0 1 126.0 686.0 Tm
0.0000 Tw
(                      i1=>" ", i2=>" ",  ) Tj
1 0 0 1 126.0 674.0 Tm
0.0000 Tw
(                      value=>$issn\}\); ) Tj
1 0 0 1 126.0 662.0 Tm
0.0000 Tw
(        $x->addfield\(\{record=>$num,  ) Tj
1 0 0 1 126.0 650.0 Tm
0.0000 Tw
(                      field=>"245",  ) Tj
1 0 0 1 126.0 638.0 Tm
0.0000 Tw
(                      i1=>"0", i2=>" ",  ) Tj
1 0 0 1 126.0 626.0 Tm
0.0000 Tw
(                      value=>[a=>$journaltitle]\}\); ) Tj
1 0 0 1 126.0 614.0 Tm
0.0000 Tw
(        $x->addfield\(\{record=>$num,  ) Tj
1 0 0 1 126.0 602.0 Tm
0.0000 Tw
(                      field=>"260",  ) Tj
1 0 0 1 126.0 590.0 Tm
0.0000 Tw
(                      i1=>" ", i2=>" ",  ) Tj
1 0 0 1 126.0 578.0 Tm
0.0000 Tw
(                      value=>[a=>"New York \(N.Y.\) :", ) Tj
1 0 0 1 270.0 566.0 Tm
0.0000 Tw
(      b=>"Dow Jones & Company"]\}\); ) Tj
1 0 0 1 174.0 554.0 Tm
0.0000 Tw
($x->addfield\(\{record=>$num, ) Tj
1 0 0 1 222.0 542.0 Tm
0.0000 Tw
(      field=>"710", ) Tj
1 0 0 1 222.0 530.0 Tm
0.0000 Tw
(      i1=>"2", i2=>" ", ) Tj
1 0 0 1 222.0 518.0 Tm
0.0000 Tw
(      value=>[a=>"Dow Jones Interactive."]\}\); ) Tj
1 0 0 1 174.0 506.0 Tm
0.0000 Tw
($x->addfield\(\{record=>$num, ) Tj
1 0 0 1 222.0 494.0 Tm
0.0000 Tw
(      field=>"856", ) Tj
1 0 0 1 222.0 482.0 Tm
0.0000 Tw
(      i1=>"4", i2=>" ", ) Tj
1 0 0 1 222.0 470.0 Tm
0.0000 Tw
(      value=>[u=>"http://www.djnr.com", ) Tj
1 0 0 1 270.0 458.0 Tm
0.0000 Tw
(      z=>"Connect"]\}\); ) Tj
1 0 0 1 126.0 446.0 Tm
0.0000 Tw
(    \} ) Tj
1 0 0 1 126.0 434.0 Tm
0.0000 Tw
(    close INPUT_FILE; ) Tj
1 0 0 1 126.0 422.0 Tm
0.0000 Tw
(    $x->output\(\{file=>">dowjones.mrc",'format'=>"usmarc"\}\) ) Tj
/F20 10 Tf
1 0 0 1 102.0 401.6 Tm
0.0000 Tw
() Tj
ET
q
102 402.6 4 4 re
f
Q
BT
1 0 0 1 110 401.6 Tm
/F20 10 Tf
0.0000 Tw
( ) Tj
/F00 10 Tf
1 0 0 1 126.0 401.6 Tm
2.4713 Tw
(Perhaps you have periodicals coming in that you want to order by  location and then title.) Tj
1 0 0 1 126.0 389.6 Tm
0.0000 Tw
(MARC::Rec`s get you out of some array indexing. ) Tj
/F10 10 Tf
1 0 0 1 126.0 377.6 Tm
0.0000 Tw
(    #!/usr/bin//perl ) Tj
1 0 0 1 126.0 365.6 Tm
0.0000 Tw
(    use MARC 1.03; ) Tj
1 0 0 1 126.0 341.6 Tm
0.0000 Tw
(    my @newmarcs=@$marc[1..$#$marc]; # array slice. ) Tj
1 0 0 1 126.0 329.6 Tm
0.0000 Tw
(    my @sortmarcs = sort by_loc_oclc @newmarcs; ) Tj
1 0 0 1 126.0 317.6 Tm
0.0000 Tw
(    @marc[1..$#$marc] = @sortmarcs; ) Tj
1 0 0 1 126.0 293.6 Tm
0.0000 Tw
(    sub by_loc_title \{ ) Tj
1 0 0 1 174.0 281.6 Tm
0.0000 Tw
(my \($aloc,$atitle\) = loc_title\($a\); ) Tj
1 0 0 1 174.0 269.6 Tm
0.0000 Tw
(my \($bloc,$btitle\) = loc_title\($b\); ) Tj
1 0 0 1 174.0 257.6 Tm
0.0000 Tw
(return  $aloc cmp $bloc  ) Tj
1 0 0 1 222.0 245.6 Tm
0.0000 Tw
(      || ) Tj
1 0 0 1 174.0 233.6 Tm
0.0000 Tw
(      $atitle cmp $btitle; ) Tj
1 0 0 1 126.0 221.6 Tm
0.0000 Tw
(    \} ) Tj
1 0 0 1 126.0 197.6 Tm
0.0000 Tw
(    sub loc_title \{ ) Tj
1 0 0 1 174.0 185.6 Tm
0.0000 Tw
(my \($rec\)=@_; ) Tj
1 0 0 1 174.0 173.6 Tm
0.0000 Tw
(my $n049 = $rec->getfirstvalue\(\{field=>040\}\); ) Tj
1 0 0 1 174.0 161.6 Tm
0.0000 Tw
(my \($loc\) = $n049=~/\(ND\\S+\)/; # Or the first two letters of your OCLC ) Tj
1 0 0 1 318.0 149.6 Tm
0.0000 Tw
(      # location. ) Tj
1 0 0 1 174.0 125.6 Tm
0.0000 Tw
(my $title = $rec->getfirstvalue\(\{field=>100,delimiter=>" "\}\); ) Tj
1 0 0 1 174.0 101.6 Tm
0.0000 Tw
(return \($loc,$title\); ) Tj
1 0 0 1 126.0 89.6 Tm
0.0000 Tw
(    \} ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(16) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
79 0 obj
4202
endobj
80 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
81 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 80 0 R
/Contents 78 0 R
>>
endobj
82 0 obj
<<
/Length 83 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F21 12 Tf
1 0 0 1 72.0 770.0 Tm
0.0000 Tw
(NOTES ) Tj
/F00 10 Tf
1 0 0 1 102.0 755.6 Tm
0.1956 Tw
(Please let us know if you run into any difficulties using MARC.pm\217we`d be happy to try to help. Also,) Tj
1 0 0 1 102.0 743.6 Tm
0.5519 Tw
(please contact us if you notice any bugs, or if you would like to suggest an improvement/enhancement.) Tj
1 0 0 1 102.0 731.6 Tm
0.0000 Tw
(Email addresses  are listed at the bottom of this page. ) Tj
/F00 10 Tf
1 0 0 1 102.0 719.6 Tm
0.1529 Tw
(Development of MARC.pm and other library oriented Perl utilities is conducted on the Perl4Lib listserv.) Tj
1 0 0 1 102.0 707.6 Tm
0.0631 Tw
(Perl4Lib is an open list and is an ideal place to ask questions about MARC.pm. Subscription information) Tj
1 0 0 1 102.0 695.6 Tm
0.0000 Tw
(is available at http://www.vims.edu/perl4lib ) Tj
/F00 10 Tf
1 0 0 1 102.0 683.6 Tm
1.2600 Tw
(Two global boolean variables are reserved for test and debugging. Both are "0" \(off\) by default. The) Tj
1 0 0 1 102.0 671.6 Tm
0.4246 Tw
() Tj
/F10 10 Tf
0.4246 Tw
($TEST) Tj
/F00 10 Tf
0.4246 Tw
( variable disables internal error messages generated using ) Tj
/F02 10 Tf
0.4246 Tw
(Carp) Tj
/F00 10 Tf
0.4246 Tw
(. It also overrides the date_stamp) Tj
1 0 0 1 102.0 659.6 Tm
0.0147 Tw
(in the "005" field with a constant "19960221075055.7". It should only be used in the automatic test suite.) Tj
1 0 0 1 102.0 647.6 Tm
0.7186 Tw
(The ) Tj
/F10 10 Tf
0.7186 Tw
($DEBUG) Tj
/F00 10 Tf
0.7186 Tw
( variable adds verbose diagnostic messages. Since both variables are used only in testing,) Tj
1 0 0 1 102.0 635.6 Tm
0.0000 Tw
() Tj
/F02 10 Tf
0.0000 Tw
(MARC::Rec) Tj
/F00 10 Tf
0.0000 Tw
( uses ) Tj
/F10 10 Tf
0.0000 Tw
($MARC::TEST) Tj
/F00 10 Tf
0.0000 Tw
( and ) Tj
/F10 10 Tf
0.0000 Tw
($MARC::DEBUG) Tj
/F00 10 Tf
0.0000 Tw
( rather than define a second pair. ) Tj
/F21 12 Tf
1 0 0 1 72.0 617.6 Tm
0.0000 Tw
(AUTHORS ) Tj
/F00 10 Tf
1 0 0 1 102.0 603.2 Tm
0.0000 Tw
(Chuck Bearden cbearden@rice.edu ) Tj
/F00 10 Tf
1 0 0 1 102.0 591.2 Tm
0.0000 Tw
(Bill Birthisel wcbirthisel@alum.mit.edu ) Tj
/F00 10 Tf
1 0 0 1 102.0 579.2 Tm
0.0000 Tw
(Derek Lane dereklane@pobox.com ) Tj
/F00 10 Tf
1 0 0 1 102.0 567.2 Tm
0.0000 Tw
(Charles McFadden chuck@vims.edu ) Tj
/F00 10 Tf
1 0 0 1 102.0 555.2 Tm
0.0000 Tw
(Ed Summers ed@cheetahmail.com ) Tj
/F21 12 Tf
1 0 0 1 72.0 537.2 Tm
0.0000 Tw
(SEE ALSO ) Tj
/F00 10 Tf
1 0 0 1 102.0 522.8 Tm
0.0000 Tw
(perl\(1\), http://lcweb.loc.gov/marc ) Tj
/F21 12 Tf
1 0 0 1 72.0 504.8 Tm
0.0000 Tw
(COPYRIGHT ) Tj
/F00 10 Tf
1 0 0 1 102.0 490.4 Tm
0.5958 Tw
(Copyright \(C\) 1999,2000, Bearden, Birthisel, Lane, McFadden, and Summers. All rights reserved. This) Tj
1 0 0 1 102.0 478.4 Tm
0.6606 Tw
(module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. 23) Tj
1 0 0 1 102.0 466.4 Tm
0.0000 Tw
(April 2000. Portions Copyright \(C\) 1999,2000, Duke University, Lane. ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 511.88 37 Tm
(17) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
83 0 obj
3155
endobj
84 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F02 8 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
85 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 84 0 R
/Contents 82 0 R
>>
endobj
86 0 obj
<<
/Length 87 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(18) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
87 0 obj
233
endobj
88 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F21 15 0 R
>>
>>
endobj
89 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 88 0 R
/Contents 86 0 R
>>
endobj
90 0 obj
<<
/Length 91 0 R
>>
stream
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
/F20 24 Tf
1 0 0 1 202.784 770 Tm
(Table of Contents) Tj
1 0 0 1 242.168 741.2 Tm
(MARC.pm) Tj
/F20 10 Tf
ET
q
0.95 g
72 680.6 451 12 re
f
Q
BT
1 0 0 1 102 683.6 Tm
(NAME) Tj
1 0 0 1 487.44 683.6 Tm
(1) Tj
ET
q
1 g
72 668.6 451 12 re
f
Q
BT
1 0 0 1 102 671.6 Tm
(SYNOPSIS) Tj
1 0 0 1 487.44 671.6 Tm
(1) Tj
ET
q
0.95 g
72 656.6 451 12 re
f
Q
BT
1 0 0 1 102 659.6 Tm
(DESCRIPTION) Tj
1 0 0 1 487.44 659.6 Tm
(2) Tj
ET
q
1 g
72 644.6 451 12 re
f
Q
BT
1 0 0 1 132 647.6 Tm
(Types of Conversions:) Tj
1 0 0 1 487.44 647.6 Tm
(2) Tj
ET
q
0.95 g
72 632.6 451 12 re
f
Q
BT
1 0 0 1 132 635.6 Tm
(Downloading and Installing) Tj
1 0 0 1 487.44 635.6 Tm
(3) Tj
ET
q
1 g
72 620.6 451 12 re
f
Q
BT
1 0 0 1 162 623.6 Tm
(Download) Tj
1 0 0 1 487.44 623.6 Tm
(3) Tj
ET
q
0.95 g
72 608.6 451 12 re
f
Q
BT
1 0 0 1 162 611.6 Tm
(Unix) Tj
1 0 0 1 487.44 611.6 Tm
(3) Tj
ET
q
1 g
72 596.6 451 12 re
f
Q
BT
1 0 0 1 162 599.6 Tm
(Win9x/WinNT/Win2000) Tj
1 0 0 1 487.44 599.6 Tm
(3) Tj
ET
q
0.95 g
72 584.6 451 12 re
f
Q
BT
1 0 0 1 162 587.6 Tm
(Test) Tj
1 0 0 1 487.44 587.6 Tm
(3) Tj
ET
q
1 g
72 572.6 451 12 re
f
Q
BT
1 0 0 1 132 575.6 Tm
(Todo) Tj
1 0 0 1 487.44 575.6 Tm
(3) Tj
ET
q
0.95 g
72 560.6 451 12 re
f
Q
BT
1 0 0 1 132 563.6 Tm
(Web Interface) Tj
1 0 0 1 487.44 563.6 Tm
(3) Tj
ET
q
1 g
72 548.6 451 12 re
f
Q
BT
1 0 0 1 132 551.6 Tm
(Option Templates) Tj
1 0 0 1 487.44 551.6 Tm
(3) Tj
ET
q
0.95 g
72 536.6 451 12 re
f
Q
BT
1 0 0 1 102 539.6 Tm
(METHODS) Tj
1 0 0 1 487.44 539.6 Tm
(4) Tj
ET
q
1 g
72 524.6 451 12 re
f
Q
BT
1 0 0 1 132 527.6 Tm
(new\(\)) Tj
1 0 0 1 487.44 527.6 Tm
(4) Tj
ET
q
0.95 g
72 512.6 451 12 re
f
Q
BT
1 0 0 1 132 515.6 Tm
(openmarc\(\)) Tj
1 0 0 1 487.44 515.6 Tm
(4) Tj
ET
q
1 g
72 500.6 451 12 re
f
Q
BT
1 0 0 1 132 503.6 Tm
(nextmarc\(\)) Tj
1 0 0 1 487.44 503.6 Tm
(5) Tj
ET
q
0.95 g
72 488.6 451 12 re
f
Q
BT
1 0 0 1 132 491.6 Tm
(nextrec\(\)) Tj
1 0 0 1 487.44 491.6 Tm
(5) Tj
ET
q
1 g
72 476.6 451 12 re
f
Q
BT
1 0 0 1 132 479.6 Tm
(closemarc\(\)) Tj
1 0 0 1 487.44 479.6 Tm
(6) Tj
ET
q
0.95 g
72 464.6 451 12 re
f
Q
BT
1 0 0 1 132 467.6 Tm
(add_map\(\)) Tj
1 0 0 1 487.44 467.6 Tm
(6) Tj
ET
q
1 g
72 452.6 451 12 re
f
Q
BT
1 0 0 1 132 455.6 Tm
(rebuild_map) Tj
1 0 0 1 487.44 455.6 Tm
(6) Tj
ET
q
0.95 g
72 440.6 451 12 re
f
Q
BT
1 0 0 1 132 443.6 Tm
(rebuild_map_all) Tj
1 0 0 1 487.44 443.6 Tm
(7) Tj
ET
q
1 g
72 428.6 451 12 re
f
Q
BT
1 0 0 1 132 431.6 Tm
(getfields) Tj
1 0 0 1 487.44 431.6 Tm
(7) Tj
ET
q
0.95 g
72 416.6 451 12 re
f
Q
BT
1 0 0 1 132 419.6 Tm
(marc_count\(\)) Tj
1 0 0 1 487.44 419.6 Tm
(7) Tj
ET
q
1 g
72 404.6 451 12 re
f
Q
BT
1 0 0 1 132 407.6 Tm
(getfirstvalue\(\)) Tj
1 0 0 1 487.44 407.6 Tm
(7) Tj
ET
q
0.95 g
72 392.6 451 12 re
f
Q
BT
1 0 0 1 132 395.6 Tm
(getvalue\(\)) Tj
1 0 0 1 487.44 395.6 Tm
(7) Tj
ET
q
1 g
72 380.6 451 12 re
f
Q
BT
1 0 0 1 132 383.6 Tm
(unpack_ldr\($record\)) Tj
1 0 0 1 487.44 383.6 Tm
(7) Tj
ET
q
0.95 g
72 368.6 451 12 re
f
Q
BT
1 0 0 1 132 371.6 Tm
(get_hash_ldr\($record\)) Tj
1 0 0 1 487.44 371.6 Tm
(8) Tj
ET
q
1 g
72 356.6 451 12 re
f
Q
BT
1 0 0 1 132 359.6 Tm
(pack_ldr\($record\)) Tj
1 0 0 1 487.44 359.6 Tm
(8) Tj
ET
q
0.95 g
72 344.6 451 12 re
f
Q
BT
1 0 0 1 132 347.6 Tm
(bib_format\($record\)) Tj
1 0 0 1 487.44 347.6 Tm
(8) Tj
ET
q
1 g
72 332.6 451 12 re
f
Q
BT
1 0 0 1 132 335.6 Tm
(unpack_008\($record\)) Tj
1 0 0 1 487.44 335.6 Tm
(8) Tj
ET
q
0.95 g
72 320.6 451 12 re
f
Q
BT
1 0 0 1 132 323.6 Tm
(get_hash_008\($record\)) Tj
1 0 0 1 487.44 323.6 Tm
(8) Tj
ET
q
1 g
72 308.6 451 12 re
f
Q
BT
1 0 0 1 132 311.6 Tm
(pack_008\($record\)) Tj
1 0 0 1 487.44 311.6 Tm
(9) Tj
ET
q
0.95 g
72 296.6 451 12 re
f
Q
BT
1 0 0 1 132 299.6 Tm
(deletefirst\(\)) Tj
1 0 0 1 487.44 299.6 Tm
(9) Tj
ET
q
1 g
72 284.6 451 12 re
f
Q
BT
1 0 0 1 132 287.6 Tm
(deletemarc\(\)) Tj
1 0 0 1 481.88 287.6 Tm
(10) Tj
ET
q
0.95 g
72 272.6 451 12 re
f
Q
BT
1 0 0 1 132 275.6 Tm
(updatefirst\(\)) Tj
1 0 0 1 481.88 275.6 Tm
(10) Tj
ET
q
1 g
72 260.6 451 12 re
f
Q
BT
1 0 0 1 132 263.6 Tm
(updatefields\(\)) Tj
1 0 0 1 481.88 263.6 Tm
(10) Tj
ET
q
0.95 g
72 248.6 451 12 re
f
Q
BT
1 0 0 1 132 251.6 Tm
(getmatch\(\)) Tj
1 0 0 1 481.88 251.6 Tm
(11) Tj
ET
q
1 g
72 236.6 451 12 re
f
Q
BT
1 0 0 1 132 239.6 Tm
(insertpos\(\)) Tj
1 0 0 1 481.88 239.6 Tm
(11) Tj
ET
q
0.95 g
72 224.6 451 12 re
f
Q
BT
1 0 0 1 132 227.6 Tm
(selectmarc\(\)) Tj
1 0 0 1 481.88 227.6 Tm
(11) Tj
ET
q
1 g
72 212.6 451 12 re
f
Q
BT
1 0 0 1 132 215.6 Tm
(searchmarc\(\)) Tj
1 0 0 1 481.88 215.6 Tm
(11) Tj
ET
q
0.95 g
72 200.6 451 12 re
f
Q
BT
1 0 0 1 132 203.6 Tm
(createrecord\(\)) Tj
1 0 0 1 481.88 203.6 Tm
(12) Tj
ET
q
1 g
72 188.6 451 12 re
f
Q
BT
1 0 0 1 132 191.6 Tm
(getupdate\(\)) Tj
1 0 0 1 481.88 191.6 Tm
(12) Tj
ET
q
0.95 g
72 176.6 451 12 re
f
Q
BT
1 0 0 1 132 179.6 Tm
(updaterecord\(\)) Tj
1 0 0 1 481.88 179.6 Tm
(12) Tj
ET
q
1 g
72 164.6 451 12 re
f
Q
BT
1 0 0 1 132 167.6 Tm
(addfield\(\)) Tj
1 0 0 1 481.88 167.6 Tm
(12) Tj
ET
q
0.95 g
72 152.6 451 12 re
f
Q
BT
1 0 0 1 132 155.6 Tm
(add_005s\(\)) Tj
1 0 0 1 481.88 155.6 Tm
(13) Tj
ET
q
1 g
72 140.6 451 12 re
f
Q
BT
1 0 0 1 132 143.6 Tm
(output\(\)) Tj
1 0 0 1 481.88 143.6 Tm
(13) Tj
ET
q
0.95 g
72 128.6 451 12 re
f
Q
BT
1 0 0 1 132 131.6 Tm
(usmarc_default\(\)) Tj
1 0 0 1 481.88 131.6 Tm
(14) Tj
ET
q
1 g
72 116.6 451 12 re
f
Q
BT
1 0 0 1 132 119.6 Tm
(ustext_default\(\)) Tj
1 0 0 1 481.88 119.6 Tm
(15) Tj
ET
q
0.95 g
72 104.6 451 12 re
f
Q
BT
1 0 0 1 132 107.6 Tm
(as_string\(\)) Tj
1 0 0 1 481.88 107.6 Tm
(15) Tj
ET
q
1 g
72 92.6 451 12 re
f
Q
BT
1 0 0 1 132 95.6 Tm
(from_string\(\)) Tj
1 0 0 1 481.88 95.6 Tm
(15) Tj
ET
q
0.95 g
72 80.6 451 12 re
f
Q
BT
1 0 0 1 102 83.6 Tm
(EXAMPLES) Tj
1 0 0 1 481.88 83.6 Tm
(15) Tj
ET
q
1 g
72 68.6 451 12 re
f
Q
BT
1 0 0 1 102 71.6 Tm
(NOTES) Tj
1 0 0 1 481.88 71.6 Tm
(17) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 520.22 37 Tm
(i) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
91 0 obj
5882
endobj
92 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
93 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 92 0 R
/Contents 90 0 R
>>
endobj
94 0 obj
<<
/Length 95 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(MARC.pm) Tj
1 0 0 1 438.55 797 Tm
(Table of Contents) Tj
/F20 10 Tf
ET
q
0.95 g
72 767 451 12 re
f
Q
BT
1 0 0 1 102 770 Tm
(AUTHORS) Tj
1 0 0 1 481.88 770 Tm
(17) Tj
ET
q
1 g
72 755 451 12 re
f
Q
BT
1 0 0 1 102 758 Tm
(SEE ALSO) Tj
1 0 0 1 481.88 758 Tm
(17) Tj
ET
q
0.95 g
72 743 451 12 re
f
Q
BT
1 0 0 1 102 746 Tm
(COPYRIGHT) Tj
1 0 0 1 481.88 746 Tm
(17) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(ii) Tj
1 0 0 1 449.64 37 Tm
(28 August 2000) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
95 0 obj
548
endobj
96 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
97 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 96 0 R
/Contents 94 0 R
>>
endobj
98 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 101 0 R
/Contents 99 0 R
>>
endobj
99 0 obj
<<
/Length 100 0 R
>>
stream
q
1 0 0 rg
180 626 8 130 re
F
Q
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
210 626 m
523 626 l
s
BT
/F21 30 Tf
1 0 0 1 210 706 Tm
0 -30 TD
(POD Translation) Tj
T* (by ) Tj
0 0 0.8 rg
/F22 30 Tf
(pod2pdf) Tj
/F21 9 Tf
T* (ajf@afco.demon.co.uk) Tj
/F03 48 Tf
0 g
1 0 0 1 191.468 371 Tm
(MARC.pm) Tj
ET
endstream
endobj
100 0 obj
290
endobj
101 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F03 9 0 R
/F21 15 0 R
/F22 16 0 R
>>
>>
endobj
102 0 obj
<<
/Length 103 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(Title Page) Tj
1 0 0 1 475.23 797 Tm
(MARC.pm) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(28 August 2000) Tj
1 0 0 1 488.54 37 Tm
(Fly leaf) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
103 0 obj
242
endobj
104 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F21 15 0 R
>>
>>
endobj
105 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 104 0 R
/Contents 102 0 R
>>
endobj
107 0 obj
<<
/Parent 106 0 R
/Dest [93 0 R /Fit]
/First 108 0 R
/Last 162 0 R
/Count 55 
/Title (Table of Contents)
>>
endobj
108 0 obj
<<
/Parent 107 0 R
/Dest [21 0 R /FitH 766.4]
/Next 109 0 R
/Title (NAME)
>>
endobj
109 0 obj
<<
/Parent 107 0 R
/Dest [21 0 R /FitH 734]
/Previous 108 0 R
/Next 110 0 R
/Title (SYNOPSIS)
>>
endobj
110 0 obj
<<
/Parent 107 0 R
/Dest [25 0 R /FitH 454.4]
/Previous 109 0 R
/Next 120 0 R
/First 111 0 R
/Last 119 0 R
/Count 9 
/Title (DESCRIPTION)
>>
endobj
111 0 obj
<<
/Parent 110 0 R
/Dest [25 0 R /FitH 311.6]
/Next 112 0 R
/Title (Types of Conversions:)
>>
endobj
112 0 obj
<<
/Parent 110 0 R
/Dest [29 0 R /FitH 782]
/Previous 111 0 R
/Next 117 0 R
/First 113 0 R
/Last 116 0 R
/Count 4 
/Title (Downloading and Installing)
>>
endobj
113 0 obj
<<
/Parent 112 0 R
/Dest [29 0 R /FitH 767.6]
/Next 114 0 R
/Title (Download)
>>
endobj
114 0 obj
<<
/Parent 112 0 R
/Dest [29 0 R /FitH 717.2]
/Previous 113 0 R
/Next 115 0 R
/Title (Unix)
>>
endobj
115 0 obj
<<
/Parent 112 0 R
/Dest [29 0 R /FitH 642.8]
/Previous 114 0 R
/Next 116 0 R
/Title (Win9x/WinNT/Win2000)
>>
endobj
116 0 obj
<<
/Parent 112 0 R
/Dest [29 0 R /FitH 580.4]
/Previous 115 0 R
/Title (Test)
>>
endobj
117 0 obj
<<
/Parent 110 0 R
/Dest [29 0 R /FitH 466.4]
/Previous 112 0 R
/Next 118 0 R
/Title (Todo)
>>
endobj
118 0 obj
<<
/Parent 110 0 R
/Dest [29 0 R /FitH 350]
/Previous 117 0 R
/Next 119 0 R
/Title (Web Interface)
>>
endobj
119 0 obj
<<
/Parent 110 0 R
/Dest [29 0 R /FitH 284]
/Previous 118 0 R
/Title (Option Templates)
>>
endobj
120 0 obj
<<
/Parent 107 0 R
/Dest [33 0 R /FitH 430.4]
/Previous 110 0 R
/Next 158 0 R
/First 121 0 R
/Last 157 0 R
/Count 37 
/Title (METHODS)
>>
endobj
121 0 obj
<<
/Parent 120 0 R
/Dest [33 0 R /FitH 383.6]
/Next 122 0 R
/Title (new\(\))
>>
endobj
122 0 obj
<<
/Parent 120 0 R
/Dest [33 0 R /FitH 161.6]
/Previous 121 0 R
/Next 123 0 R
/Title (openmarc\(\))
>>
endobj
123 0 obj
<<
/Parent 120 0 R
/Dest [37 0 R /FitH 488]
/Previous 122 0 R
/Next 124 0 R
/Title (nextmarc\(\))
>>
endobj
124 0 obj
<<
/Parent 120 0 R
/Dest [37 0 R /FitH 338]
/Previous 123 0 R
/Next 125 0 R
/Title (nextrec\(\))
>>
endobj
125 0 obj
<<
/Parent 120 0 R
/Dest [41 0 R /FitH 632]
/Previous 124 0 R
/Next 126 0 R
/Title (closemarc\(\))
>>
endobj
126 0 obj
<<
/Parent 120 0 R
/Dest [41 0 R /FitH 590]
/Previous 125 0 R
/Next 127 0 R
/Title (add_map\(\))
>>
endobj
127 0 obj
<<
/Parent 120 0 R
/Dest [41 0 R /FitH 260]
/Previous 126 0 R
/Next 128 0 R
/Title (rebuild_map)
>>
endobj
128 0 obj
<<
/Parent 120 0 R
/Dest [45 0 R /FitH 782]
/Previous 127 0 R
/Next 129 0 R
/Title (rebuild_map_all)
>>
endobj
129 0 obj
<<
/Parent 120 0 R
/Dest [45 0 R /FitH 716]
/Previous 128 0 R
/Next 130 0 R
/Title (getfields)
>>
endobj
130 0 obj
<<
/Parent 120 0 R
/Dest [45 0 R /FitH 614]
/Previous 129 0 R
/Next 131 0 R
/Title (marc_count\(\))
>>
endobj
131 0 obj
<<
/Parent 120 0 R
/Dest [45 0 R /FitH 548]
/Previous 130 0 R
/Next 132 0 R
/Title (getfirstvalue\(\))
>>
endobj
132 0 obj
<<
/Parent 120 0 R
/Dest [45 0 R /FitH 482]
/Previous 131 0 R
/Next 133 0 R
/Title (getvalue\(\))
>>
endobj
133 0 obj
<<
/Parent 120 0 R
/Dest [45 0 R /FitH 248]
/Previous 132 0 R
/Next 134 0 R
/Title (unpack_ldr\($record\))
>>
endobj
134 0 obj
<<
/Parent 120 0 R
/Dest [49 0 R /FitH 608]
/Previous 133 0 R
/Next 135 0 R
/Title (get_hash_ldr\($record\))
>>
endobj
135 0 obj
<<
/Parent 120 0 R
/Dest [49 0 R /FitH 494]
/Previous 134 0 R
/Next 136 0 R
/Title (pack_ldr\($record\))
>>
endobj
136 0 obj
<<
/Parent 120 0 R
/Dest [49 0 R /FitH 404]
/Previous 135 0 R
/Next 137 0 R
/Title (bib_format\($record\))
>>
endobj
137 0 obj
<<
/Parent 120 0 R
/Dest [49 0 R /FitH 278]
/Previous 136 0 R
/Next 138 0 R
/Title (unpack_008\($record\))
>>
endobj
138 0 obj
<<
/Parent 120 0 R
/Dest [49 0 R /FitH 152]
/Previous 137 0 R
/Next 139 0 R
/Title (get_hash_008\($record\))
>>
endobj
139 0 obj
<<
/Parent 120 0 R
/Dest [53 0 R /FitH 716]
/Previous 138 0 R
/Next 140 0 R
/Title (pack_008\($record\))
>>
endobj
140 0 obj
<<
/Parent 120 0 R
/Dest [53 0 R /FitH 566]
/Previous 139 0 R
/Next 141 0 R
/Title (deletefirst\(\))
>>
endobj
141 0 obj
<<
/Parent 120 0 R
/Dest [57 0 R /FitH 548]
/Previous 140 0 R
/Next 142 0 R
/Title (deletemarc\(\))
>>
endobj
142 0 obj
<<
/Parent 120 0 R
/Dest [57 0 R /FitH 314]
/Previous 141 0 R
/Next 143 0 R
/Title (updatefirst\(\))
>>
endobj
143 0 obj
<<
/Parent 120 0 R
/Dest [57 0 R /FitH 176]
/Previous 142 0 R
/Next 144 0 R
/Title (updatefields\(\))
>>
endobj
144 0 obj
<<
/Parent 120 0 R
/Dest [61 0 R /FitH 752]
/Previous 143 0 R
/Next 145 0 R
/Title (getmatch\(\))
>>
endobj
145 0 obj
<<
/Parent 120 0 R
/Dest [61 0 R /FitH 614]
/Previous 144 0 R
/Next 146 0 R
/Title (insertpos\(\))
>>
endobj
146 0 obj
<<
/Parent 120 0 R
/Dest [61 0 R /FitH 416]
/Previous 145 0 R
/Next 147 0 R
/Title (selectmarc\(\))
>>
endobj
147 0 obj
<<
/Parent 120 0 R
/Dest [61 0 R /FitH 326]
/Previous 146 0 R
/Next 148 0 R
/Title (searchmarc\(\))
>>
endobj
148 0 obj
<<
/Parent 120 0 R
/Dest [65 0 R /FitH 782]
/Previous 147 0 R
/Next 149 0 R
/Title (createrecord\(\))
>>
endobj
149 0 obj
<<
/Parent 120 0 R
/Dest [65 0 R /FitH 584]
/Previous 148 0 R
/Next 150 0 R
/Title (getupdate\(\))
>>
endobj
150 0 obj
<<
/Parent 120 0 R
/Dest [65 0 R /FitH 242]
/Previous 149 0 R
/Next 151 0 R
/Title (updaterecord\(\))
>>
endobj
151 0 obj
<<
/Parent 120 0 R
/Dest [65 0 R /FitH 152]
/Previous 150 0 R
/Next 152 0 R
/Title (addfield\(\))
>>
endobj
152 0 obj
<<
/Parent 120 0 R
/Dest [69 0 R /FitH 524]
/Previous 151 0 R
/Next 153 0 R
/Title (add_005s\(\))
>>
endobj
153 0 obj
<<
/Parent 120 0 R
/Dest [69 0 R /FitH 482]
/Previous 152 0 R
/Next 154 0 R
/Title (output\(\))
>>
endobj
154 0 obj
<<
/Parent 120 0 R
/Dest [73 0 R /FitH 158]
/Previous 153 0 R
/Next 155 0 R
/Title (usmarc_default\(\))
>>
endobj
155 0 obj
<<
/Parent 120 0 R
/Dest [77 0 R /FitH 716]
/Previous 154 0 R
/Next 156 0 R
/Title (ustext_default\(\))
>>
endobj
156 0 obj
<<
/Parent 120 0 R
/Dest [77 0 R /FitH 578]
/Previous 155 0 R
/Next 157 0 R
/Title (as_string\(\))
>>
endobj
157 0 obj
<<
/Parent 120 0 R
/Dest [77 0 R /FitH 488]
/Previous 156 0 R
/Title (from_string\(\))
>>
endobj
158 0 obj
<<
/Parent 107 0 R
/Dest [77 0 R /FitH 448.4]
/Previous 120 0 R
/Next 159 0 R
/Title (EXAMPLES)
>>
endobj
159 0 obj
<<
/Parent 107 0 R
/Dest [85 0 R /FitH 784.4]
/Previous 158 0 R
/Next 160 0 R
/Title (NOTES)
>>
endobj
160 0 obj
<<
/Parent 107 0 R
/Dest [85 0 R /FitH 632]
/Previous 159 0 R
/Next 161 0 R
/Title (AUTHORS)
>>
endobj
161 0 obj
<<
/Parent 107 0 R
/Dest [85 0 R /FitH 551.6]
/Previous 160 0 R
/Next 162 0 R
/Title (SEE ALSO)
>>
endobj
162 0 obj
<<
/Parent 107 0 R
/Dest [85 0 R /FitH 519.2]
/Previous 161 0 R
/Title (COPYRIGHT)
>>
endobj
106 0 obj
<<
/Type /Outlines
/Count 56
/First 107 0 R
/Last 162 0 R
>>
endobj
3 0 obj
<<
/Type /Catalog
/Pages 4 0 R
/PageMode /UseOutlines
/Outlines 106 0 R
>>
endobj
4 0 obj
<<
/Type /Pages
/Kids [ 98 0 R 105 0 R 93 0 R 97 0 R 21 0 R 25 0 R 29 0 R 33 0 R 37 0 R 41 0 R 45 0 R 49 0 R 53 0 R 57 0 R 61 0 R 65 0 R 69 0 R 73 0 R 77 0 R 81 0 R 85 0 R 89 0 R ]
/Count 22
/MediaBox [0 0 595 842]
>>
endobj
xref
0 163
0000000000 65535 f 
0000000015 00000 n 
0000000171 00000 n 
0000121342 00000 n 
0000121432 00000 n 
0000000267 00000 n 
0000002367 00000 n 
0000002466 00000 n 
0000002564 00000 n 
0000002664 00000 n 
0000002768 00000 n 
0000002864 00000 n 
0000002965 00000 n 
0000003069 00000 n 
0000003177 00000 n 
0000003275 00000 n 
0000003378 00000 n 
0000003484 00000 n 
0000003598 00000 n 
0000008001 00000 n 
0000008022 00000 n 
0000008147 00000 n 
0000008230 00000 n 
0000014771 00000 n 
0000014792 00000 n 
0000014940 00000 n 
0000015023 00000 n 
0000020635 00000 n 
0000020656 00000 n 
0000020804 00000 n 
0000020887 00000 n 
0000028765 00000 n 
0000028786 00000 n 
0000028933 00000 n 
0000029016 00000 n 
0000034764 00000 n 
0000034785 00000 n 
0000034932 00000 n 
0000035015 00000 n 
0000040313 00000 n 
0000040334 00000 n 
0000040459 00000 n 
0000040542 00000 n 
0000047685 00000 n 
0000047706 00000 n 
0000047853 00000 n 
0000047936 00000 n 
0000054089 00000 n 
0000054110 00000 n 
0000054235 00000 n 
0000054318 00000 n 
0000058896 00000 n 
0000058917 00000 n 
0000059042 00000 n 
0000059125 00000 n 
0000064689 00000 n 
0000064710 00000 n 
0000064846 00000 n 
0000064929 00000 n 
0000070486 00000 n 
0000070507 00000 n 
0000070655 00000 n 
0000070738 00000 n 
0000077480 00000 n 
0000077501 00000 n 
0000077648 00000 n 
0000077731 00000 n 
0000085755 00000 n 
0000085776 00000 n 
0000085935 00000 n 
0000086018 00000 n 
0000091749 00000 n 
0000091770 00000 n 
0000091918 00000 n 
0000092001 00000 n 
0000097823 00000 n 
0000097844 00000 n 
0000097981 00000 n 
0000098064 00000 n 
0000102320 00000 n 
0000102341 00000 n 
0000102478 00000 n 
0000102561 00000 n 
0000105770 00000 n 
0000105791 00000 n 
0000105927 00000 n 
0000106010 00000 n 
0000106297 00000 n 
0000106317 00000 n 
0000106419 00000 n 
0000106502 00000 n 
0000112438 00000 n 
0000112459 00000 n 
0000112573 00000 n 
0000112656 00000 n 
0000113258 00000 n 
0000113278 00000 n 
0000113392 00000 n 
0000113475 00000 n 
0000113559 00000 n 
0000113904 00000 n 
0000113925 00000 n 
0000114051 00000 n 
0000114349 00000 n 
0000114370 00000 n 
0000114473 00000 n 
0000121264 00000 n 
0000114559 00000 n 
0000114685 00000 n 
0000114779 00000 n 
0000114893 00000 n 
0000115051 00000 n 
0000115162 00000 n 
0000115333 00000 n 
0000115431 00000 n 
0000115543 00000 n 
0000115670 00000 n 
0000115768 00000 n 
0000115880 00000 n 
0000115999 00000 n 
0000116107 00000 n 
0000116262 00000 n 
0000116359 00000 n 
0000116479 00000 n 
0000116597 00000 n 
0000116714 00000 n 
0000116833 00000 n 
0000116950 00000 n 
0000117067 00000 n 
0000117188 00000 n 
0000117303 00000 n 
0000117423 00000 n 
0000117546 00000 n 
0000117664 00000 n 
0000117791 00000 n 
0000117920 00000 n 
0000118045 00000 n 
0000118172 00000 n 
0000118299 00000 n 
0000118428 00000 n 
0000118553 00000 n 
0000118674 00000 n 
0000118794 00000 n 
0000118915 00000 n 
0000119037 00000 n 
0000119155 00000 n 
0000119274 00000 n 
0000119394 00000 n 
0000119514 00000 n 
0000119636 00000 n 
0000119755 00000 n 
0000119877 00000 n 
0000119995 00000 n 
0000120113 00000 n 
0000120229 00000 n 
0000120353 00000 n 
0000120477 00000 n 
0000120596 00000 n 
0000120703 00000 n 
0000120819 00000 n 
0000120932 00000 n 
0000121045 00000 n 
0000121161 00000 n 
trailer
<<
/Size 163
/Root 3 0 R
/Info 2 0 R
>>
startxref
121665
%%EOF
